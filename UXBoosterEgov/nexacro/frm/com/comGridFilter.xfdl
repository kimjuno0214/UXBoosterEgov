<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <TypeDefinition url="..\default_typedef.xml"/>
  <Form id="comFilter" left="0" top="0" width="440" height="327" titletext="그리드 필터" onload="comFilter_onload" onkeydown="comFilter_onkeydown" border="1px solid #c0c0c0" background="#ffffff">
    <Layouts>
      <Layout>
        <Static id="Static00" taborder="5" left="0" height="45" right="0" bottom="0" cssclass="sta_pop_btnbg"/>
        <Combo id="cboOperator" taborder="0" left="20" top="20" height="25" innerdataset="@dsOperator" codecolumn="REF1" datacolumn="NAME" autoselect="true" text="항목선택" onitemchanged="cboOperator_onitemchanged" index="0" value="check" width="140"/>
        <Edit id="edtOperator" taborder="1" left="165" top="20" height="25" autoselect="true" right="20" readonly="true" onkeydown="edtOperator_onkeydown"/>
        <Grid id="grdItem" taborder="2" left="20" top="55" binddataset="dsItem" onheadclick="grdItem_onheadclick" onkeydown="grdItem_onkeydown" scrollbartype="none auto" autofittype="col" right="20" bottom="65" extendgridoption="false">
          <Formats>
            <Format id="default">
              <Columns>
                <Column size="30"/>
                <Column size="360"/>
                <Column size="0"/>
              </Columns>
              <Rows>
                <Row size="32" band="head"/>
                <Row size="30"/>
              </Rows>
              <Band id="head">
                <Cell displaytype="checkboxcontrol" text="1" edittype="checkbox"/>
                <Cell col="1" text="모두선택" border="1px solid #c7c7c7,0px none"/>
                <Cell col="2"/>
              </Band>
              <Band id="body">
                <Cell displaytype="checkboxcontrol" edittype="checkbox" text="bind:CHK"/>
                <Cell col="1" text="bind:NAME" textAlign="left" border="1px solid #e3e3e3,0px none"/>
                <Cell col="2"/>
              </Band>
            </Format>
          </Formats>
        </Grid>
        <Button id="btnConfirm" taborder="3" text="확인" width="50" height="25" tabstop="true" onclick="btnConfirm_onclick" cssclass="btn_WF_check01" right="223" bottom="10"/>
        <Button id="btnClose" taborder="4" text="닫기" width="50" height="25" onclick="btnClose_onclick" cssclass="btn_WF_cancel01" right="168" bottom="10"/>
        <Static id="stcLabel" taborder="6" text="필터방법" left="22" top="290" width="100" height="29" visible="false"/>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsOperator" firefirstcount="0" firenextcount="0" useclientlayout="false" updatecontrol="true" enableevent="true" loadkeymode="keep" loadfiltermode="keep" reversesubsum="false">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
          <Column id="REF1" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsItem">
        <ColumnInfo>
          <Column id="CHK" type="STRING" size="256"/>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[/***************************************************************************************************
 * 업무구분		: UXBooster
 * 화 면 명		: comFilter.xfdl
 * 화면설명		: 그리드 공통 필터 팝업
 * 작 성 자		: 테이크
 * 작 성 일		: 
 * 수정이력		 
 ***************************************************************************************************
 *	수 정 일		수 정 자		수정 내용
 ***************************************************************************************************
 *									내부팝업입니다. 직접 사용하지 마세요. 
 ***************************************************************************************************/

/***************************************************************************************************
 *	FORM 변수 선언 영역
 ***************************************************************************************************/
this.fvGrd, this.fvDst, this.fvCol, this.fvFilterType;

/***************************************************************************************************
 *	FORM EVENT 영역 (onload)
 ***************************************************************************************************/ 
this.comFilter_onload = function(obj:Form, e:nexacro.LoadEventInfo)
{
	if (take.formOnLoad(this)) //공통 온로드(필수) : 최초 온로드시 공통으로 호출되는 함수 --> 필수
	{
		take.tranCode(this, ["00039"], ["dsOperator"], "", 
			function(){
				this.cboOperator.set_index(0);
				
				var objParamInfo= this.parent.gridInfo;
				this.fnLoadFilterInfo(objParamInfo);
			}
		);
	}
};

/**
 *	comFilter_onkeydown	: onkeydown Event
 *	@ return 			: N/A
 *	@ example 			: N/A
 */
this.comFilter_onkeydown = function(obj:Form, e:nexacro.KeyEventInfo)
{
	if (e.keycode == 27) this.fvGrd._xfnClose(this, "");
    
    if (this.parent._type_name=="PopupDiv")
    {
        this.parent.closePopup();
    }
}

/***************************************************************************************************
 *	TRANSACTION 서비스 호출 처리
 ***************************************************************************************************/ 
 
/***************************************************************************************************
 *	CALLBACK 콜백 호출 처리   
 ***************************************************************************************************/  
 
/***************************************************************************************************
 *	각 COMPONENT 별 EVENT 영역
 ***************************************************************************************************/ 
/**
 *	btnConfirm_onclick	: onclick Event
 *	@ return 			: N/A
 *	@ example 			: N/A
 */
this.btnConfirm_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{
	this.fnApplyFilterInfo();
	//this.fvGrd._xfnClose(this, "");
}

/**
 *	btnClose_onclick	: onclick Event
 *	@ return 			: N/A
 *	@ example 			: N/A
 */
this.btnClose_onclick = function(obj:Button,  e:nexacro.ClickEventInfo)
{	
    var objComp;
    
	this.fvGrd._xfnClose(this, "");
    
    objComp = take.nvl(this.parent,"");
    
    if (objComp!="")
    {
        if (objComp.hasOwnProperty("_type_name"))
        {
            if (objComp._type_name=="PopupDiv")
            {
                objComp.closePopup();
            }
        }
    }
}

/**
 *	grdItem_onheadclick	: onheadclick Event
 *	@ return 			: N/A
 *	@ example 			: N/A
 */
this.grdItem_onheadclick = function(obj:nexacro.Grid,e:nexacro.GridClickEventInfo)
{
	this.fvGrd._xfnHeadCheckSelectAll(obj, e.cell);
};

/**
 *	cboOperator_onitemchanged	: onitemchanged Event
 *	@ return 					: N/A
 *	@ example 					: N/A
 */
this.cboOperator_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	var oGrd  = this.grdItem;
	var oDst  = this.grdItem.getBindDataset();	

	if (e.postindex==0)
	{
		this.edtOperator.set_readonly(true);		
		this.edtOperator.set_value("");

		this.grdItem.set_readonly(false);
	}
	else
	{
		this.edtOperator.set_readonly(false);		
		this.grdItem.set_readonly(true);
	}
	
	oGrd.setCellProperty("head", 0, "text", 1);
	
	oDst.set_enableevent(false);
	for (var i=0; i<oDst.rowcount; i++)
		 oDst.setColumn(i, "CHK", 1);			 
	oDst.set_enableevent(true);	
};

/**
 *	grdItem_onkeydown		: onclick Event
 *	@ return 				: N/A
 *	@ example 				: N/A
 */
this.grdItem_onkeydown = function(obj:nexacro.Grid,e:nexacro.KeyEventInfo)
{
	if (e.keycode == 27) this.fvGrd._xfnClose(this, "");
    
    var objComp = take.nvl(this.parent,"");
    
    if (objComp!="")
    {
        if (objComp.hasOwnProperty("_type_name"))
        {
            if (objComp._type_name=="PopupDiv")
            {
                objComp.closePopup();
            }
        }
    }
};

/**
 *	btnFilterListClose_onclick	: onclick Event
 *	@ return 					: N/A
 *	@ example 					: N/A
 */
this.btnFilterListClose_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	this.divFilter.set_visible(false);
};

/**
 *	edtOperator_onkeydown	: onkeydown Event
 *	@ return 				: N/A
 *	@ example 				: N/A
 */
this.edtOperator_onkeydown = function(obj:nexacro.Edit,e:nexacro.KeyEventInfo)
{
	if (e.keycode != "13") return;
 	
	this.fnApplyFilterInfo();
 	this.fvGrd._xfnClose(this, "");
};

/***************************************************************************************************
 *	사용자 FUNCTION 영역
 ***************************************************************************************************/  
/**
 *	fnLoadFilterInfo	: 필터정보를 화면에 표시
 *	@ return 			: N/A
 *	@ example 			: N/A
 */
this.fnLoadFilterInfo = function(objGridInfo)
{
	var objParamInfo = objGridInfo;

	// 대상그리드에 대한 컬럼정보 수집
	this.fvGrd		  = objParamInfo["grid"];    
	this.fvDst		  = this.fvGrd.getBindDataset();
	this.fvCol  	  = objParamInfo["cell"];
	this.fvFilterType = objParamInfo["filtertype"];
	
	var nRow; 
		
	var nCellHead	 	 = this.fvCol;
	var arrGridFilterData= this.fvGrd["_filterData"];
	var arrGridFilterInfo= this.fvGrd["_filterInfo"];

	var nHeadCell	 	 = arrGridFilterInfo[nCellHead].headcell;
	var nBodyCell	 	 = arrGridFilterInfo[nCellHead].cell;
	var sColType	 	 = arrGridFilterInfo[nCellHead].coltype;
	var sCellId         = arrGridFilterInfo[nCellHead].colid;
    var sCellTxt         = this.fvGrd.getCellProperty("head", nHeadCell, "text");
   
   this.grdItem.setCellProperty("head", 1, "text", sCellTxt);
	
	// 필터 정보가 있다면 표시하고 아니면 기본값 지정
	if (this.fvFilterType == "combocontrol" || this.fvFilterType == "combotext")
	{				
		var sComboDs	= this.fvGrd.getCellProperty("body", nBodyCell, "combodataset");
		var sCodeCol	= this.fvGrd.getCellProperty("body", nBodyCell, "combocodecol");
		var sDataCol	= this.fvGrd.getCellProperty("body", nBodyCell, "combodatacol");
		
		var objComboDs	= this.fvGrd._xfnLookup(this.fvGrd.parent, sComboDs);			
		
		// 콤보 목록 생성
		this.dsItem.set_enableevent(false);
		this.dsItem.clearData();
		
		this.grdItem.set_binddataset();
		
		for (var i=0; i<objComboDs.getRowCount(); i++)
		{
			var nRow	= this.dsItem.addRow();
			this.dsItem.setColumn(nRow, "CHK" , 1);
			this.dsItem.setColumn(nRow, "CODE", objComboDs.getColumn(i, sCodeCol));
			this.dsItem.setColumn(nRow, "NAME", objComboDs.getColumn(i, sDataCol));
		}
		
		this.grdItem.set_binddataset(this.dsItem);
		this.dsItem.set_enableevent(true);
	}
 	else
 	{
 		//선택된 컬럼으로 그리드 리스트에서 컬럼 인덱스 구하기
 		sColIdx = this.fvDst.getColIndex(sCellId);    
 		
  		var arrData = this.fvDst._rawRecords;        
  		arrData = take.ArrayPluck(arrData,sColIdx);	// 선택된 컬럼의 데이터만 축출한다	        
        arrData = take.ArrayUnique(arrData);   	// 축출한 데이터의 중복을 제거한다
 		
  		this.grdItem.set_binddataset(null);
		
		// 부모창 데이터셋의 해당 항목 중복값 제거
  		this.dsItem.set_enableevent(false);
  		this.dsItem.clearData();
		
 		for (var i=0; i<arrData.length; i++)
 		{
 			var sColName = arrData[i];
			var sColCode = this.fvGrd._xfnIsEmpty(sColName) ? "empty" : null;
 				sColName = this.fvGrd._xfnIsEmpty(sColName) ? "" : sColName;
 			
			if (sColCode == "empty")
			if (this.dsItem.findRow("CODE", "empty")>-1) continue;
			
			var nRow = this.dsItem.addRow();
			this.dsItem.setColumn(nRow, "CHK" , 1		);
			this.dsItem.setColumn(nRow, "CODE", sColCode);
			this.dsItem.setColumn(nRow, "NAME", sColName);		
		}

		this.dsItem.set_keystring("S:NAME");
  		
  		// 데이터가 보여지도록 첫번째 Row 세팅
  		this.dsItem.set_rowposition(0);
  		this.dsItem.set_enableevent(true);
		
		// 그리드에 데이터셋 바인딩
  		this.grdItem.set_binddataset(this.dsItem); 
 	}
	
	var arrCellFilterData=arrGridFilterData[this.fvCol];	
		
	// 마지막 값 셋팅
	if (!this.fvGrd._xfnIsEmpty(arrCellFilterData))
	{
		for (var j=0; j<arrCellFilterData.length; j++)
		{
			var objFilterData= arrCellFilterData[j];				
	 				
	 		var sOperatorCd	 = objFilterData.operatorcode;
			if (this._xfnIsEmpty(sOperatorCd)) sOperatorCd = "";
	 		var sOperatorNm  = objFilterData.operatorname;
			if (this._xfnIsEmpty(sOperatorNm)) sOperatorNm = "";
	 		var sGridCode	 = objFilterData.code;
	 		var sGridName	 = objFilterData.name;
	 		
			if (sOperatorCd == "check")
			{
				var nRow;
				
				  if (sGridCode == "empty") nRow = this.dsItem.findRowExpr("CODE=='" + sGridCode + "'");
				else 						nRow = this.dsItem.findRowExpr("NAME=='" + sGridName + "'");
				
				if (nRow>-1)
					this.dsItem.setColumn(nRow, "CHK", 0);
			}
			else
			{
				if (this.fvFilterType == "combocontrol" || this.fvFilterType == "combotext")
				{
					var nFndRow = this.dsItem.findRowExpr("CODE=='" + sOperatorNm + "'");
					if (nFndRow>-1)	
						sOperatorNm = this.dsItem.getColumn(nFndRow, "NAME");
				}
			}
			
			this.cboOperator.set_value(sOperatorCd);
			this.edtOperator.set_value(sOperatorNm);
		}	
	}
	
	// 상단 콤보박스가 항목선택인 경우에는 하단 그리드에서 제어
	if (this.cboOperator.index==0)
	{
		this.edtOperator.set_readonly(true);		
		this.grdItem.set_readonly(false);
	}
	else
	{
		this.edtOperator.set_readonly(false);		
		this.grdItem.set_readonly(true);
	}
}

/**
 * combo type 을 제외한 필터 적용
 * @param {Dataset} 필터 항목 Dataset
 */
this.fnApplyFilterInfo = function()
{
    var sOperatorCd, sOperatorNm, sChk, sCode, sName;
    var arrGridFilterData, arrCellFilterData, arrCellSelectData;
    var objDs, objFilterData, objComp, objForm;
    var aFnCallBack;
    var nCnt, nFndRow;
    var bFilter;
    
    objDs = this.dsItem;
    
 	arrGridFilterData = this.fvGrd["_filterData"];
	arrCellFilterData = new Array();		// 필터 정보 생성    
    arrCellSelectData = new Array();		// 필터 정보 생성
 	
 	sOperatorCd	= this.cboOperator.value;	// 조건
 	sOperatorNm	= this.edtOperator.value;	// 조건값
	
	switch (sOperatorCd)
	{
		// 항목선택 / 그리드 항목을 체크해서 필터링한다.
		case "check" :
            nCnt = objDs.getRowCount();
            
			for (var i=0; i<nCnt; i++)
			{
				// 선택제외한 대상만 관리한다.
				sChk	= objDs.getColumn(i, "CHK" );
				sCode	= objDs.getColumn(i, "CODE");			
				sName	= objDs.getColumn(i, "NAME");			
				
                objFilterData = { "operatorcode": sOperatorCd,
								  "operatorname": sOperatorNm,
								  "code"		: sCode,
								  "name"		: sName	};
                                          
				if (sChk=="0") 
				{	
					arrCellFilterData.push(objFilterData); 
				} else {
                    arrCellSelectData.push(objFilterData);
                }
			}
		
		break;
				
		default :
		
			if (!this.fvGrd._xfnIsEmpty(sOperatorNm))
			{
				if (this.fvFilterType == "combocontrol")
				{
					nFndRow = objDs.findRowExpr("NAME=='" + sOperatorNm + "'");
					if (nFndRow>-1)	
						sOperatorNm = objDs.getColumn(nFndRow, "CODE");
				}
							
				objFilterData = { "operatorcode": sOperatorCd,
								  "operatorname": sOperatorNm,
								  "code"		: null,
								  "name"		: null };
					
				arrCellFilterData.push(objFilterData);
                arrCellSelectData.push(objFilterData);
			}
		
		break;
	}
	
	if (arrCellFilterData.length == 0) 
    {
 		this.fnClrFilterInfo();							// 필터 제거
        this.fnClrSelectInfo();
        bFilter=false;
    } else {
 		this.fnSetFilterInfo(arrCellFilterData);		// 필터 지정
        this.fnSetSelectInfo(arrCellSelectData);		// 필터 지정
        bFilter=true;
 	}
    
    aFnCallBack = take.nvl(this.fvGrd.callbackfunction,"");
    
    // 필터 실행
    if (aFnCallBack=="") this.fnExcFilterInfo();
    
    if (bFilter)
    {
        this.fvGrd._xfnSetCellFilterImage(this.fvGrd, this.fvCol, "setting");
    } else {
        this.fvGrd._xfnSetCellFilterImage(this.fvGrd, this.fvCol, "default");
    }
	
    objComp = take.nvl(this.parent,"");
    
    if (objComp!="")
    {
        if (objComp.hasOwnProperty("_type_name"))
        {
            if (objComp._type_name=="PopupDiv")
            {
                objForm = take.nvl(this.parent.gridInfo.parentform,"");
                
                if (objForm=="")
                {
                    take.debug("comFilter.fnApplyFilterInfo", "parentform을 지정해야 Callback 함수를 호출할 수 있습니다.");
                }
                
                if (aFnCallBack!="")
                {
                    //function형일 경우
                    if (take.isFunction(aFnCallBack))
                    {
                        //aFnCallBack.call(objForm, this.fvGrd.name, {"data" : this.fvGrd["_filterData"], "info" : this.fvGrd["_filterInfo"]});  
                        aFnCallBack.call(objForm, this.fvGrd.name, {"data" : this.fvGrd["_selectData"], "info" : this.fvGrd["_filterInfo"]});   
                        
                    } else {
                        //해당 함수가 있는지 여부 체크
                        if (objForm.hasOwnProperty(aFnCallBack))
                        {
                            //함수 인지 여부 체크
                            if (take.isFunction(objForm[aFnCallBack])) 
                            {
                                //해당 함수 호출
                                
                                //objForm[aFnCallBack].call(objForm, this.fvGrd.name, {"data" : this.fvGrd["_filterData"], "info" : this.fvGrd["_filterInfo"]});
                                objForm[aFnCallBack].call(objForm, this.fvGrd.name, {"data" : this.fvGrd["_selectData"], "info" : this.fvGrd["_filterInfo"]});
                            } else {
                                take.debug("comFilter.fnApplyFilterInfo", objForm.name + "에 " + aFnCallBack + "는 Function이 아닙니다.");
                                return false;
                            }
                        } else {
                            take.debug("comFilter.fnApplyFilterInfo", objForm.name + "에 " + aFnCallBack + " Function이 존재하지 않습니다.");
                            return false;
                        }
                    }
                }
                
                objComp.closePopup();
            }
        }
    }
    
    //닫기
	this.fvGrd._xfnClose(this, "");
}

/**
 * 대상 그리드에 주어진 컬럼에 해당하는 필터 데이터를 제거한다.
 */
this.fnClrFilterInfo = function()
{
	var arrGridFilterData	= this.fvGrd["_filterData"];
	var arrCellFilterData	= arrGridFilterData[this.fvCol];
	
	if (!this.fvGrd._xfnIsUndefined(arrCellFilterData)) 
	{
		arrCellFilterData = null;
		arrGridFilterData[this.fvCol]	= arrCellFilterData;
		this.fvGrd["_filterData"]		= arrGridFilterData;
	}
}

/**
 * 대상 그리드에 주어진 컬럼에 해당하는 필터 정보를 지정한다.
 * @param {array} arrData 필터 데이터로 {logic, operator, value} 형태의 object 배열이다.
 */
this.fnSetFilterInfo = function(arrData)
{
	var arrGridFilterData			  = this.fvGrd["_filterData"];
		arrGridFilterData[this.fvCol] = arrData;
		
	this.fvGrd["_filterData"]		  = arrGridFilterData;
}

/**
 * 대상 그리드에 주어진 컬럼에 해당하는 필터 데이터를 제거한다.
 */
this.fnClrSelectInfo = function()
{
	var arrGridFilterData
    var arrCellFilterData;
	
    if (this.fvGrd.hasOwnProperty("_selectData"))
    {
        arrGridFilterData	= this.fvGrd["_selectData"];
        arrCellFilterData	= arrGridFilterData[this.fvCol];
    } else {
        arrGridFilterData = null;
        arrCellFilterData = null;
    }
    
	if (!this.fvGrd._xfnIsUndefined(arrCellFilterData)) 
	{
		arrCellFilterData = null;
        
        if (take.nvl(arrGridFilterData,"")!="")
        {
            if (arrGridFilterData.hasOwnProperty(this.fvCol))
            {
                arrGridFilterData[this.fvCol]	= arrCellFilterData;
                this.fvGrd["_selectData"]		= arrGridFilterData;
            }
        }
	}
}

/**
 * 대상 그리드에 주어진 컬럼에 해당하는 필터 정보를 지정한다.
 * @param {array} arrData 필터 데이터로 {logic, operator, value} 형태의 object 배열이다.
 */
this.fnSetSelectInfo = function(arrData)
{
	var arrGridFilterData, arrGridFilterData;
    
    if (this.fvGrd.hasOwnProperty("_selectData"))
    {
        arrGridFilterData			  = this.fvGrd["_selectData"];
		arrGridFilterData[this.fvCol] = arrData;
        
        this.fvGrd["_selectData"]		  = arrGridFilterData;
    }
}



/**
 * 대상 그리드 필터 실행
 * @param {Grid} grid 대상 Grid Component
 */
this.fnExcFilterInfo = function() 
{	
	this.fvGrd._xfnProcFilterGrid(this.fvGrd);
}

/**
* this.gfnPluck : 배열의 특정 위치의 값을 축출
* @param   : arrData(Array) - 배열값 
*            key(Number)    - 축출할 배열 인덱스
* @return  : Array
* @example : arrData = new Array();
*            this.fnPluck(arrData, 1);
**/
this.fnPluck = function(arrData, key) 
{
    return arrData.map (function(object) {return object[key];});
};

/**
* this.fnUniqueDs : 배열의 중복 제거후 2차원 배열로 리턴
* @param   : arrData(Array) - 배열값 
* @return  : Array
* @example : arrData = new Array();
*            this.fnUniqueDs.(arrData);
**/
this.fnUniqueDs = function(arrData)
{
    var nCnt    = arrData.length;    
    var arrTemp = new Array();
    var arrRtn  = new Array();
    
    for (var i=0; i<nCnt; i++)
		arrTemp[arrData[i]] = arrData[i];
	
	for (var i in arrTemp)
	{	
		if (typeof arrTemp[i] == "function") continue;
		arrRtn.push(new Array(1,arrTemp[i]));
	}
	
    return arrRtn;
}]]></Script>
  </Form>
</FDL>
