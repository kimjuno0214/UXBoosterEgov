<?xml version="1.0" encoding="utf-8"?>
<FDL version="2.1">
  <Form id="PM030" width="1659" height="832" titletext="프로젝트관리_메뉴관리_메뉴관리" onload="PM030_onload">
    <Layouts>
      <Layout height="832" mobileorientation="landscape" width="1659">
        <Div id="divSearch" taborder="4" left="10" top="0" height="43" cssclass="div_WF_searchBox01" text="" maxwidth="" right="10" minwidth="1300">
          <Layouts>
            <Layout>
              <Static id="Static07_00" taborder="7" text="20" left="0" top="0" width="20" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" bottom="0"/>
              <Static id="Static07_00_01_00" taborder="14" text="50" left="640" top="0" width="50" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" bottom="0"/>
              <Static id="staMenuT" taborder="4" text="메뉴" left="690" top="10" width="80" height="21" cssclass="sta_WF_textR"/>
              <Static id="Static07_00_01_00_00" taborder="19" text="50" left="975" top="0" width="50" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" bottom="0"/>
              <Static id="staUseYnT" taborder="5" text="사용여부" left="1025" top="10" width="80" height="21" cssclass="sta_WF_textR"/>
              <Static id="staDeviceT" taborder="6" text="디바이스" left="355" top="10" width="80" height="21" cssclass="sta_WF_textR"/>
              <Edit id="edtMenu" taborder="1" left="staMenuT:10" top="10" width="195" height="21" onkeyup="Edit_onkeyup"/>
              <Combo id="cboUseYn" taborder="2" text="Combo00" left="staUseYnT:10" top="10" width="195" height="21" innerdataset="dsCboUseYn" codecolumn="CODE" datacolumn="NAME"/>
              <Combo id="cboDevice" taborder="3" left="staDeviceT:10" top="10" width="195" height="21" innerdataset="dsCboDeviceType" codecolumn="CODE" datacolumn="NAME" cssclass="cmb_WF_essential"/>
              <Static id="staProjectNmT" taborder="9" text="프로젝트" left="20" top="10" width="80" height="21" cssclass="sta_WF_textR"/>
              <Combo id="cboProjectNm" taborder="0" left="staProjectNmT:10" top="10" width="195" height="21" innerdataset="dsCboProjectCd" codecolumn="CODE" datacolumn="NAME" visible="true" readonly="true" cssclass="cmb_WF_essential" text=""/>
              <Static id="Static07_00_00" taborder="8" text="285" left="20" top="0" width="285" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" height="10"/>
              <Static id="Static07_00_00_00" taborder="10" text="285" left="20" top="31" width="285" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" height="11"/>
              <Static id="Static07_00_01" taborder="11" text="50" left="305" top="0" width="50" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" bottom="0"/>
              <Static id="Static07_00_00_01" taborder="12" text="285" left="355" top="0" width="285" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" height="10"/>
              <Static id="Static07_00_00_02" taborder="13" text="285" left="355" top="31" width="285" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" height="11"/>
              <Static id="Static07_00_00_01_00" taborder="15" text="285" left="690" top="0" width="285" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" height="10"/>
              <Static id="Static07_00_00_02_00" taborder="16" text="285" left="690" top="31" width="285" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" height="11"/>
              <Static id="Static07_00_00_01_00_00" taborder="17" text="285" left="1025" top="0" width="285" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" height="10"/>
              <Static id="Static07_00_00_02_00_00" taborder="18" text="285" left="1025" top="31" width="285" background="rgba(255,0,0,0.4)" visible="false" color="#ff0000" textAlign="center" height="11"/>
            </Layout>
          </Layouts>
        </Div>
        <Button id="btnShowHide" taborder="1" top="divSearch:0" height="10" cssclass="btn_WF_fold01" left="48.16%" width="60"/>
        <Static id="Static09" taborder="2" text="Static03" left="0" top="btnShowHide:0" height="20" background="rgba(255,0,0,0.4)" visible="false" right="0"/>
        <Static id="Static23" taborder="3" text="Static23" left="0" top="0" width="10" background="rgba(255,0,0,0.4)" visible="false" bottom="40"/>
        <Div id="divDetail" taborder="0" left="10" top="btnShowHide:20" right="10" bottom="10" text="" minwidth="1300" maxwidth="">
          <Layouts>
            <Layout>
              <Grid id="grdMenuList" taborder="27" left="0" top="26" width="310" autofittype="col" bottom="0" treeusecheckbox="false" treeinitstatus="expand,all" onselectchanged="grdMenuList_onselectchanged" oncellclick="divDetail_grdMenuList_oncellclick" autoenter="select" treeuseexpandkey="true" treeuseimage="false" binddataset="dsProjectMenuList" ondrag="divDetail_grdMenuList_ondrag">
                <Formats>
                  <Format id="default">
                    <Columns>
                      <Column size="181"/>
                    </Columns>
                    <Rows>
                      <Row size="32" band="head"/>
                      <Row size="30"/>
                    </Rows>
                    <Band id="head">
                      <Cell text="메뉴유형"/>
                    </Band>
                    <Band id="body">
                      <Cell text="bind:MENU_NM" displaytype="treeitemcontrol" treelevel="bind:MENU_LEVEL" edittype="tree" border="1px solid #d7d7d7, 0px solid #d7d7d7, 1px solid #d7d7d7, 1px solid #d7d7d7"/>
                    </Band>
                  </Format>
                </Formats>
              </Grid>
              <Static id="Static33" taborder="12" left="451" top="26" height="31" cssclass="sta_WF_td01L" right="0"/>
              <Static id="Static34" taborder="13" left="449" top="56" height="31" cssclass="sta_WF_td01L" right="0"/>
              <Static id="Static36" taborder="14" left="449" top="116" height="31" cssclass="sta_WF_td01L" right="0"/>
              <Static id="staParentMenu" taborder="10" left="449" top="26" height="31" cssclass="sta_WF_td01L" width="216"/>
              <Static id="staDeviceT" taborder="15" text="디바이스" left="staParentMenu:-1" top="26" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="staMenuNmT" taborder="16" text="메뉴명" left="330" top="116" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="staMenuTypeT" taborder="17" text="메뉴유형" left="330" top="56" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Edit id="edtMenuNm" taborder="5" left="457" top="121" height="21" onchanged="divDetail_edtMenuNm_onchanged" maxlength="12" inputfilter="symbol" cssclass="edt_WF_essential" width="200"/>
              <Static id="staModNm" taborder="39" left="449" top="342" height="31" cssclass="sta_WF_td01L" width="216"/>
              <Static id="Static24" taborder="47" text="20" left="330" height="20" background="rgba(255,0,0,0.4)" visible="false" right="0" textAlign="center" top="373"/>
              <Static id="Static02" taborder="28" text="Static03" left="310" top="0" background="rgba(255,0,0,0.4)" visible="false" width="20" bottom="30"/>
              <Static id="staMultiLanguageT" taborder="19" text="다국어 정보" left="330" top="393" height="21" cssclass="sta_WF_title02" right="149"/>
              <Static id="staModDtT" taborder="40" text="수정일" left="staModNm:-1" top="342" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="staModDt" taborder="41" left="staModDtT:-1" top="342" height="31" cssclass="sta_WF_td01L" right="0"/>
              <Button id="btnMultiLanguage" taborder="20" text="다국어매핑" top="393" width="100" height="21" right="0" onclick="divDetail_btnMultiLanguage_onclick"/>
              <Combo id="cboDevice" taborder="0" text="" left="staDeviceT:7" top="31" height="21" innerdataset="dsCboDeviceType" codecolumn="CODE" datacolumn="NAME" cssclass="cmb_WF_essential" width="200"/>
              <Combo id="cboMenuType" taborder="1" text="" left="457" top="61" height="21" codecolumn="CODE" datacolumn="NAME" width="200" onitemchanged="divDetail_cboMenuType_onitemchanged" innerdataset="dsCboMenuType" cssclass="cmb_WF_essential"/>
              <Static id="Static00" taborder="22" left="449" top="86" height="31" cssclass="sta_WF_td01L" right="0" text=""/>
              <Static id="staScreenT" taborder="23" text="프로그램" left="330" top="86" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="Static03" taborder="25" left="449" top="146" height="31" cssclass="sta_WF_td01L" right="0"/>
              <Combo id="cboMenuMark" taborder="6" text="Combo00" left="456" top="151" height="21" innerdataset="dsCboMenuYn" codecolumn="CODE" datacolumn="NAME" width="201"/>
              <Static id="staMenuListT" taborder="26" text="메뉴 목록" left="0" cssclass="sta_WF_title02" right="1329" top="0" height="21" onclick="divDetail_staMenuListT_onclick"/>
              <Grid id="grdMultilanguageInfo" taborder="29" left="330" top="419" bottom="0" autofittype="col" binddataset="dsMultiLanguageInfo" right="0">
                <Formats>
                  <Format id="default">
                    <Columns>
                      <Column size="100"/>
                      <Column size="600"/>
                    </Columns>
                    <Rows>
                      <Row size="32" band="head"/>
                      <Row size="30"/>
                    </Rows>
                    <Band id="head">
                      <Cell text="구분"/>
                      <Cell col="1" text="다국어"/>
                    </Band>
                    <Band id="body">
                      <Cell text="bind:LANG_NM" textAlign="center"/>
                      <Cell col="1" text="bind:ML_LANG_TXT"/>
                    </Band>
                  </Format>
                </Formats>
              </Grid>
              <Static id="staMenuDetailT" taborder="30" text="메뉴 상세" left="330" top="0" height="21" cssclass="sta_WF_title02" right="149" visible="false"/>
              <Static id="staParentMenuT" taborder="31" text="상위메뉴" left="330" top="26" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="staManualT" taborder="18" text="매뉴얼" left="cboMenuMark:7" top="146" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="staMenuMarkT" taborder="24" text="메뉴표시" left="330" top="146" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="staManualLink" taborder="7" text="미등록" left="staManualT:7" top="146" width="105" height="31" textDecoration="underline" cursor="pointer" textAlign="left" onclick="divDetail_staManualLink_onclick"/>
              <Edit id="edtScreen" taborder="2" left="457" top="91" width="176" height="21" readonly="true" cssclass="edt_WF_essential"/>
              <Button id="btnScreen" taborder="3" top="91" width="21" height="21" cssclass="btn_WF_search02" left="edtScreen:3" onclick="btnDirector_onclick" enable="true"/>
              <Static id="staDescT" taborder="32" text="상세설명" left="330" top="206" width="120" cssclass="sta_WF_th01L" height="107"/>
              <Static id="staDesc" taborder="33" top="206" cssclass="sta_WF_td01L" height="107" left="449" right="0" text=""/>
              <Static id="staRegNmT" taborder="34" text="등록자" left="330" top="312" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="staRegNm" taborder="35" left="449" top="312" height="31" cssclass="sta_WF_td01L" width="216"/>
              <Static id="staRegDtT" taborder="36" text="등록일" left="staRegNm:-1" top="312" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="staRegDt" taborder="37" left="staRegDtT:-1" top="312" height="31" cssclass="sta_WF_td01L" right="0" text=""/>
              <Static id="staModNmT" taborder="38" text="수정자" left="330" top="342" width="120" height="31" cssclass="sta_WF_th01L"/>
              <TextArea id="txtDesc" taborder="9" top="211" height="97" left="457" right="7"/>
              <Static id="staUseYnT" taborder="21" text="사용여부" left="btnScreen:7" top="86" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Combo id="cboUseYn" taborder="4" text="Combo00" left="staUseYnT:7" top="91" height="21" innerdataset="dsCboDetailUseYn" codecolumn="CODE" datacolumn="NAME" cssclass="cmb_WF_essential" width="200"/>
              <Static id="staMenuIconT" taborder="42" text="메뉴아이콘" left="cboMenuType:7" top="56" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="staMenuIcon" taborder="43" text="미등록" left="staMenuIconT:7" top="56" width="105" height="31" textDecoration="underline" cursor="pointer" textAlign="left" onclick="divDetail_staMenuIcon_onclick"/>
              <Static id="staMenuParamT" taborder="44" text="파라미터" left="330" top="176" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="Static01" taborder="45" left="449" top="176" height="31" cssclass="sta_WF_td01L" right="0"/>
              <Static id="staMenuParam" taborder="46" left="519" top="176" height="31" right="7"/>
              <Button id="btnParam" taborder="8" top="181" width="51" height="21" left="456" text="추가" onclick="divDetail_btnParam_onclick" cssclass="btn_WF_plus01"/>
              <Static id="staScreenCd" taborder="11" left="609" top="96" width="37" height="15" visible="false" text=""/>
              <Static id="staMenuOrderT" taborder="48" text="메뉴정렬" left="664" top="116" width="120" height="31" cssclass="sta_WF_th01L"/>
              <Static id="staMenuOrder" taborder="49" left="874" top="116" width="150" height="30" enable="false"/>
              <Spin id="spnSort" taborder="50" left="791" top="121" width="80" height="21" min="1" max="999" value="" onchanged="divDetail_spnSort_onchanged"/>
            </Layout>
          </Layouts>
        </Div>
      </Layout>
    </Layouts>
    <Objects>
      <Dataset id="dsCboUseYn">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsCboDeviceType">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsCboMenuType">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsMultiLanguageInfo">
        <ColumnInfo>
          <Column id="ML_CD" type="STRING" size="255" description="다국어코드"/>
          <Column id="LANG_CD" type="STRING" size="255" description="언어코드"/>
          <Column id="LANG_NM" type="STRING" size="255" description="언어명"/>
          <Column id="ML_LANG_TXT" type="STRING" size="255" description="다국어"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsCboMenuYn">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsCboProjectCd">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsProjectMenuList" onrowposchanged="dsProjectMenuList_onrowposchanged" canrowposchange="dsProjectMenuList_canrowposchange">
        <ColumnInfo>
          <Column id="PROJECT_CD" type="STRING" size="255"/>
          <Column id="MENU_CD" type="STRING" size="255"/>
          <Column id="MENU_NM" type="STRING" size="255"/>
          <Column id="ML_CD" type="STRING" size="255"/>
          <Column id="MENU_ICON" type="STRING" size="255"/>
          <Column id="DEVICE_TYPE" type="STRING" size="255"/>
          <Column id="MENU_TYPE" type="STRING" size="255"/>
          <Column id="MENU_LEVEL" type="STRING" size="255"/>
          <Column id="MENU_ORDER" type="STRING" size="255"/>
          <Column id="PARENT_MENU" type="STRING" size="255"/>
          <Column id="PARENT_MENU_NM" type="STRING" size="255"/>
          <Column id="DESC_TXT" type="STRING" size="255"/>
          <Column id="DISPLAY_YN" type="STRING" size="255"/>
          <Column id="MANUAL_TXT" type="STRING" size="255"/>
          <Column id="PROGRAM_CD" type="STRING" size="255"/>
          <Column id="ROOT_MENU" type="STRING" size="255"/>
          <Column id="USE_YN" type="STRING" size="255"/>
          <Column id="REG_DT" type="STRING" size="255"/>
          <Column id="REG_CD" type="STRING" size="255"/>
          <Column id="REG_NM" type="STRING" size="255"/>
          <Column id="MOD_DT" type="STRING" size="255"/>
          <Column id="MOD_CD" type="STRING" size="255"/>
          <Column id="MOD_NM" type="STRING" size="255"/>
          <Column id="PROGRAM_NM" type="STRING" size="255"/>
          <Column id="MENU_PARAM" type="STRING" size="256"/>
          <Column id="MENU_CDNM" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsFile"/>
      <Dataset id="dsDummy">
        <ColumnInfo>
          <Column id="PROJECT_CD" type="STRING" size="255" description="프로젝트코드"/>
          <Column id="MENU_CD" type="STRING" size="255" description="메뉴코드"/>
          <Column id="MENU_NM" type="STRING" size="255" description="메뉴명"/>
          <Column id="ML_CD" type="STRING" size="255" description="다국어코드"/>
          <Column id="MENU_ICON" type="STRING" size="255" description="메뉴아이콘"/>
          <Column id="DEVICE_TYPE" type="STRING" size="255" description="디바이스유형"/>
          <Column id="MENU_TYPE" type="STRING" size="255" description="메뉴유형"/>
          <Column id="MENU_LEVEL" type="STRING" size="255" description="메뉴Level"/>
          <Column id="MENU_ORDER" type="STRING" size="255" description="메뉴정렬순서"/>
          <Column id="PARENT_MENU" type="STRING" size="255" description="상위메뉴"/>
          <Column id="DISPLAY_YN" type="STRING" size="255" description="메뉴표시여부"/>
          <Column id="DESC_TXT" type="STRING" size="255" description="상세설명"/>
          <Column id="SCHEDULE_START_TIME" type="STRING" size="255" description="일정시작시간"/>
          <Column id="SCHEDULE_END_TIME" type="STRING" size="255" description="일정종료시간"/>
          <Column id="BREAKING_TXT" type="STRING" size="255" description="휴게시간정보"/>
          <Column id="CONCENT_TXT" type="STRING" size="255" description="집중근무시간정보"/>
          <Column id="ATTACH_YN" type="STRING" size="255" description="파일첨부여부"/>
          <Column id="REPLY_YN" type="STRING" size="255" description="댓글여부"/>
          <Column id="TEMPLATE_YN" type="STRING" size="255" description="양식사용여부"/>
          <Column id="TEMPLATE_CD" type="STRING" size="255" description="양식코드"/>
          <Column id="PUSH_YN" type="STRING" size="255" description="푸시사용여부"/>
          <Column id="DOCUMENT_TYPE" type="STRING" size="255" description="문서타입"/>
          <Column id="USE_YN" type="STRING" size="255" description="사용여부"/>
          <Column id="REG_DT" type="STRING" size="255" description="등록일시"/>
          <Column id="REG_CD" type="STRING" size="255" description="등록자코드"/>
          <Column id="REG_NM" type="STRING" size="255" description="등록자명"/>
          <Column id="MOD_DT" type="STRING" size="255" description="수정일시"/>
          <Column id="MOD_CD" type="STRING" size="255" description="수정자코드"/>
          <Column id="MOD_NM" type="STRING" size="255" description="수정자명"/>
          <Column id="ROOT_MENU" type="STRING" size="256"/>
          <Column id="MANUAL_TXT" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
      <Dataset id="dsCboDetailUseYn">
        <ColumnInfo>
          <Column id="CODE" type="STRING" size="256"/>
          <Column id="NAME" type="STRING" size="256"/>
        </ColumnInfo>
      </Dataset>
    </Objects>
    <Script type="xscript5.1"><![CDATA[/**
*  SYSTEM FORM NAME
*
*  @MenuPath    1Depth > 2Depth
*  @FileName    *.xfdl
*  @Creator     홍길동
*  @CreateDate  yyyy.MM.DD
*  @Version     1.0
*  @Desction    설명
*
************** 소스 수정 이력 *************************************************
*    Date          Modifier            Description
*******************************************************************************
*  YYYY.MM.DD      홍길동             최초 생성
*******************************************************************************
*/

//공통 라이브러리 호출

/*********************************************************
 * 1.1 FORM 변수 선언 영역
 ********************************************************/
//this.fv_nFormVal = null;     //용도
this.fv_sGdsAdminYn   = UXBooster.gdsUserInfo.getColumn(0, "ADMIN_YN"); 	 // gds _ 관리자권한 여부
this.fv_sGdsProjectCd = UXBooster.av_sProjectCd;							 // 글로변 변수_프로젝트코드
this.fv_bMenuType     = false;										     // 메뉴유형 변경시 '메뉴','화면' 구분 값
this.fv_nSaveBeforeRowType = 1;										     // 최소 RowType값 초기 행의 상태 Dataset.ROWTYPE_NORMAL
this.fv_objTree = this.divDetail.form.grdMenuList;

/*********************************************************
* 1.2 FORM EVENT 영역(onload등)
********************************************************/
/**
* formid_onload 최초 로드시 발생되는 이벤트 (필수)
*/
this.PM030_onload = function(obj:Form, e:nexacro.LoadEventInfo)
{
   if (take.formOnLoad(this)) //공통 온로드(필수) : 최초 온로드시 공통으로 호출되는 함수 --> 필수
   {
        // 초기화
		this.fnInIt();
   }
}

/*********************************************************
* 2 필수 FUNCTION 영역 (fnSearch, fnAdd, fnSave, fnDel, fnExcel...)
********************************************************/
/**
 * fnSearch : 조회 transaction (필수) --> 공통 조회에서 호출할 디폴트값 세팅 필요
 * @param  {String} sTranId 트랜젝션 아이디
 * @return {N/A}    N/A
 * @example this.fnSearch("ID");
 */
this.fnSearch = function(sTranId)
{
    //공통 조회에서 호출할 디폴트값 세팅 필요
    if (take.nvl(sTranId, "")=="") sTranId = "projectMenuAllList";

    var sMenuCd, sProjectCd, sDeviceType, sUseYn;
	var objDivSearch;
	var arrValGrp;
    var nCnt = 0;

    objDivSearch = this.divSearch.form;
    this.dsProjectMenuList.clearData();

    // 벨리데이션

    arrValGrp = takeval.getGroupArray(this, "Search");

    if (take.isArray(arrValGrp))
    {
        nCnt = arrValGrp.length;
    }

    if (nCnt<=0)
    {
        takeval.add(this, "Search", objDivSearch.cboProjectNm, "프로젝트", "value", true, "string", [0,100], "");
        takeval.add(this, "Search", objDivSearch.cboDevice,    "디바이스", "value", true, "string", "", "");
    }

    if(!takeval.check(this, "Search")) return;

    sMenuCd		= take.nvl(objDivSearch.edtMenu.value, "");		  // 메뉴명
    sProjectCd  = take.nvl(objDivSearch.cboProjectNm.value, "");  // 프로젝트명
    sDeviceType	= take.nvl(objDivSearch.cboDevice.value, "");	  // 디바이스유형
    sUseYn	    = take.nvl(objDivSearch.cboUseYn.value, "");	  // 사용여부

    take.tranSelect
    (
        this,
        "projectMenuAllList",
        "ProjectManagement.projectMenuAllList",
        "",
        "dsProjectMenuList",
        "MENU_CD='"       + sMenuCd     +
        "' PROJECT_CD ='" + sProjectCd  +
        "' DEVICE_TYPE='" + sDeviceType +
        "' USE_YN='" 	  + sUseYn 		+ "'",
        "fnCallback"
    )
}

/**
 * fnSave : 저장 transaction (필수) -->공통 저장에서 호출할 디폴트값 세팅 필요
 * @param  {String} sTranId 트랜젝션 아이디
 * @return {N/A}    N/A
 * @example this.fnSave("ID");
 */
this.fnSave = function(sTranId)
{
    //공통 조회에서 호출할 디폴트값 세팅 필요
    if (take.nvl(sTranId, "")=="") sTranId = "projectMenuSave";

	if (   !take.isDsModified(this.dsFile)
		&& !take.isDsModified(this.dsMultiLanguageInfo)
		&& !take.isDsModified(this.dsProjectMenuList)
		&& !take.isDsModified(this.dsDummy)
		)
	{
		take.alert(this, "info", "변경된 내역이 없습니다.");
		return;
	}

	var objDs;
	var objDivDetail;
	var nRow, nCnt = 0;
	var sProjectCd, sEditMenuNm;
	var bRowChange;
	var arrValGrp;

	objDivDetail = this.divDetail.form;
	sEditMenuNm  = take.nvl(objDivDetail.edtMenuNm.value, "");
	bRowChange   = take.confirm(this, "question", "{name}을(를) {text}하시겠습니까?", { name : sEditMenuNm, text : "저장"});

	if(bRowChange)
	{
		// 벨리데이션
		arrValGrp = takeval.getGroupArray(this, "Save");

		if (take.isArray(arrValGrp))
		{
			nCnt = arrValGrp.length;
		}

		if (nCnt<=0)
		{
			takeval.add(this, "Save", objDivDetail.edtMenuNm, "메뉴유형", "value", true, "string", [0,12], "");

			// 프로그램은 메뉴 유형이 화면인 경우 벨리데이션 체크
			if(this.fv_bMenuType){
				//takeval.add(this, "Save", objDivDetail.edtScreen,   "프로그램", "value", true, "string", "", "");
			}

		}

		if(!takeval.check(this, "Save")) return;

		objDs  	   = this.dsProjectMenuList;
		nRow       = objDs.rowposition;
		sProjectCd = this.divSearch.form.cboProjectNm.value;

		objDs.setColumn(nRow, "PROJECT_CD", sProjectCd);
		this.fv_nSaveBeforeRowType = objDs.getRowType(nRow);
		take.transaction
		(
			this,
			"projectMenuSave",
			"SVC_LOC::pm/projectMenuSave.do",
			"dsProjectMenuList=dsProjectMenuList:U dsFile=dsFile:U",
			"",
			"sProjectCd='"+sProjectCd+"''",
			"fnCallback"
		);
	}
}

/**
 * fnAddRow : 행 추가 함수 (필수)--> 공통 행추가에서 호출할 디폴트값 세팅 필요
 * @param  {String} sGridId 그리드 아이디
 * @param  {Number} nRow    addRow 리턴값(추가된 행 위치)
 * @example this.fnAdd(sGrdId, nRow);
 */
this.fnAddRow = function(sGrdId)
{
    //공통 행추가에서 호출할 디폴트값 세팅
    if (take.nvl(sGrdId, "")=="") sGrdId = "grdMenuList";

	var nRowType, nRow, nMenuType;
	var objGrid, objDs;

	objGrid = this.divDetail.form.grdMenuList;
	objDs     = this.dsProjectMenuList;
	nRow      = objDs.rowposition;
	nRowType  = objDs.getRowType(nRow);
	nMenuType = objDs.getColumn(nRow, "MENU_TYPE");
	
	if(nMenuType=="03"){
		return false;
	}
	if(nRowType!=2){
		if(nRow == -1) {
			this.divDetail.form.grdMenuList._takeTreeAdd(this,0);
		} else{
			this.divDetail.form.grdMenuList._takeTreeAddChild(this,0);
		}
	}
}

/**
 * fnDel : 행 삭제 함수 (필수) --> 공통 행삭제에서 호출할 디폴트값 세팅 필요
 * @param  {String} sGridId 그리드 아이디
 * @param  {Number, Array} arrnRow    deleteRow 리턴값
 * @return {N/A} N/A
 * @example this.fnDel(sGrdId, nRow);
 */
this.fnDelRow = function(sGrdId, arrnRow)
{
    //공통 행추가에서 호출할 디폴트값 세팅
    if (take.nvl(sGrdId, "")=="") sGrdId = "grdMenuList";

	var objDs;
	var nRow;
	var sNm;
	var bRowChange;

	objDs = this.dsProjectMenuList;
	nRow  = objDs.rowposition;
	sNm   = objDs.getColumn(nRow, "MENU_NM");

	if(objDs.rowcount <= 0){
		take.alert(this, "info", "메뉴 목록이 없습니다.");
		return;
	}

	var nRow     = this.dsProjectMenuList.rowposition;
	var nSelProj = this.dsProjectMenuList.getColumn(nRow, "MENU_NM");

	bRowChange = take.confirm(this, "question", "{name}을(를) {text}하시겠습니까?", { name : sNm, text : "삭제"});
	if(bRowChange){
		// 삭제 함수 호출
		this.fnDataDelete();
	}
}

/**
 * fnExcel : 엑셀 export 함수 (필수) --> 공통 Excel download에서 호출할 디폴트값 세팅 필요
 * @param  {String} sGridId 그리드 아이디
 * @return {N/A} N/A
 * @example this.fnDelRow(sGrdId, nRow);
 */
this.fnExcel = function(fnExcel)
{
    //공통 Excel download에서 호출할 디폴트값 세팅
    if (take.nvl(sGrdId, "")=="") sGrdId = "Grid00";

    //Script
}

/*********************************************************
 * 3 각 COMPONENT 별 EVENT 영역
 ********************************************************/
//메뉴데이터셋 onrowposchanged 이벤트
this.dsProjectMenuList_onrowposchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)
{
	this.fnLagnSearch();

	var objDs, objStaMaual, objDivForm;
	var nRow, nIdx, nSort;
	var sManualTxt, sMenuTypeCd, sMenuOrder, sChildRow, sMenuLevel;

	objDs 		= this.dsProjectMenuList;

    objDivForm  = this.divDetail.form;
	nRow  		= objDs.rowposition;
	objStaMaual = objDivForm.staManualLink;
	objStaIcon  = objDivForm.staMenuIcon;

	sManualTxt  = take.nvl(objDs.getColumn(nRow, "MANUAL_TXT"), "");
	sMenuTypeCd = take.nvl(objDs.getColumn(nRow, "MENU_TYPE"), "");
	sMenuIcon   = take.nvl(objDs.getColumn(nRow, "MENU_ICON"), "");

    sMenuLevel  = take.nvl(objDs.getColumn(nRow, "MENU_LEVEL"));
    sMenuOrder  = take.nvl(objDs.getColumn(nRow, "MENU_ORDER"));

    
	this.fnSetCboMenuType(sMenuTypeCd);

    
    objStaMaual.set_text(take.isEmpty(sManualTxt) ? "미등록" : "등록됨");

    objStaIcon.set_text(take.isEmpty(sMenuIcon) ? "미등록" : "등록됨");

	objStaIcon.set_visible(sMenuLevel == "0");

	sChildRow = take.getTreeChildRows(this.divDetail.form.grdMenuList, 0, nRow);
	objDivForm.cboMenuType.set_readonly(sChildRow != -1);

    

    objDivForm.spnSort.set_readonly(sMenuLevel == "0");

	

	if (sMenuOrder!="")

	{

		nIdx = sMenuOrder.lastIndexOf(".");

		if (nIdx>=0)

		{

			sMenuOrder = take.nvl(sMenuOrder.substr(nIdx+1),"");

			

			if (sMenuOrder!="")

			{

				nSort = parseInt(sMenuOrder);

				objDivForm.spnSort.set_value(nSort);

			}

		}

	}
};

//
// this.fv_nEventStaus=0;
// this.fv_nEventRow=null;
// //메뉴데이터셋 onrowsetchanged 이벤트
// this.dsProjectMenuList_onrowsetchanged = function(obj:nexacro.NormalDataset,e:nexacro.DSRowsetChangeEventInfo)
// {
//     //Dataset.REASON_APPEND      12  Dataset이 추가되었 때
//     //Dataset.REASON_DELETE      20 Dataset의 Row가 삭제되었을 때
//     //Dataset.REASON_MOVE        32 Dataset의 Row가 다른 위치로 이동되었을 때
//     //Dataset.REASON_ENABLEEVENT 41 Dataset의 enableevent 속성이 'true'가 되었을 때
// trace("e.reason --> " + e.reason + " / this.fv_nEventStaus --> " + this.fv_nEventStaus);
//     switch(this.fv_nEventStaus)
//     {
//         case 12: //추가
//             this.fnAddMenu(obj, this.fv_nEventRow);
//             break;
//         case 20: //삭제
//             break;
//         case 32: //이동
//             break;
//         case 41: //enableevent발생
//             break;
//         default:
//     }
//
//     this.fv_nEventStaus = e.reason;
//     this.fv_nEventRow = e.row;
// };

//다국어 맵핑 버튼 클릭 이벤트
this.divDetail_btnMultiLanguage_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	var sCompName = this.dsProjectMenuList.getColumn(this.dsProjectMenuList.rowposition, "MENU_NM");
	take.openPopup(this, "addMultiLanguage", "biz::sys/OM010P06.xfdl", {argInSearchText:sCompName}, "", "fnPopCallback", false);
};

//프로그램 선택 팝업 오픈 이벤트
this.btnDirector_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)
{
	// 프로그램선택 팝업 오픈 PM030P03
	take.openPopup(this, "PM030P03", "biz::sys/PM030P03.xfdl", "", "",
		function(sId, sRtn){
			if (take.nvl(sRtn, "")!="")
			{
				var objDs = this.dsProjectMenuList;

				var sCd = sRtn.split(",")[0];
				var sNm = sRtn.split(",")[1];
				var sId = sRtn.split(",")[2];

				this.fv_sProgramCd = sCd;

				objDs.setColumn(objDs.rowposition, "PROGRAM_CD", sCd);
				objDs.setColumn(objDs.rowposition, "PROGRAM_NM", sNm);

				this.divDetail.form.edtScreen.set_value(sNm + "(" + sId + ")");
				this.divDetail.form.staScreenCd.set_text(sCd);
			}
		},
	false);
};

//매뉴얼 팝업 '등록','미등록' 링크 클릭시 팝업 오픈
this.divDetail_staManualLink_onclick = function(obj:nexacro.Static,e:nexacro.ClickEventInfo)
{
	var objDs 		= this.dsProjectMenuList;
	var nRow		= objDs.rowposition
	var sProjectCd  = this.divSearch.form.cboProjectNm.value;
 	var sTemplateCd = "";
	var sManualTxt  = take.nvl(objDs.getColumn(nRow, "MANUAL_TXT"), "");
	var sStaLink    = this.divDetail.form.staManualLink;

 	AgrKey = {sProjectCd:sProjectCd, sManualTxt:sManualTxt};

	take.openPopup(this, "OM010P07", "biz::sys/OM010P07.xfdl", AgrKey, "",
		function(sId, sRtn){
			if(take.nvl(sRtn, "")!=""){
				objDs.setColumn(nRow, "MANUAL_TXT", sRtn);
				sStaLink.set_text("등록됨");
			} else {
				objDs.setColumn(nRow, "MANUAL_TXT", sRtn);
				sStaLink.set_text("미등록");
			}
		},
	false);
};

// 메뉴유형 선택에 따라 프로그램 팝업 오픈 여부
this.divDetail_cboMenuType_onitemchanged = function(obj:nexacro.Combo,e:nexacro.ItemChangeEventInfo)
{
	this.fnSetCboMenuType(obj.value);
};

// 메뉴 아이콘 등록 팝업 오픈
this.divDetail_staMenuIcon_onclick = function(obj:nexacro.Static,e:nexacro.ClickEventInfo)
{
	var objDs = this.dsProjectMenuList;
	var nRow  = objDs.rowposition;

	var sProjectCd = objDs.getColumn(nRow, "PROJECT_CD");
	var sMenuCd    = objDs.getColumn(nRow, "MENU_CD");

	AgrKey = {sProjectCd:sProjectCd, sMenuCd:sMenuCd};

	take.openPopup(this, "PM030P01", "biz::sys/PM030P01.xfdl", AgrKey, "",
		function(sId, sCloseGubun){
			if (sCloseGubun == "save")
			{
				this.fnSearch("projectMenuList");
			}else {
				return false;
			}
		});
};



this.divDetail_btnParam_onclick = function(obj:nexacro.Button,e:nexacro.ClickEventInfo)

{

	var sProgramCd;

	var objDs = this.dsProjectMenuList;

	sProgramCd = take.nvl(this.divDetail.form.staScreenCd.text, "");



	AgrKey = {sProgramCd:sProgramCd};

	// 파라메터 팝업 오픈 PM030P04

	take.openPopup(this, "PM030P04", "biz::sys/PM030P04.xfdl", AgrKey, "",

		function(sId, sRtn){

			if (take.nvl(sRtn, "")!="")

			{

				objDs.setColumn(objDs.rowposition, "MENU_PARAM", sRtn);

			}

		}

	);

};







this.dsProjectMenuList_canrowposchange = function(obj:nexacro.NormalDataset,e:nexacro.DSRowPosChangeEventInfo)

{

	var bRowChange;

	var nRowType;

	var nRow;

	var nPreRow;



	nRow     = obj.rowposition;

	nPreRow  = e.oldrow;

	nRowType = obj.getRowType(nRow);



	if (nRowType != Dataset.ROWTYPE_NORMAL && nRowType != Dataset.ROWTYPE_EMPTY) {

		bRowChange = take.confirm(this, "String", "작업중인 데이터는 저장되지 않습니다.\n그래도 이동하시겠습니까?");



		if(!bRowChange){

			return false;

		}else {

			obj.reset();

		}

	}

};





// 메뉴명 검색 엔터값 조회

this.Edit_onkeyup = function(obj:nexacro.Edit,e:nexacro.KeyEventInfo)

{

	if (e.keycode == 13) {

		this.fnSearch("projectMenuAllList");

	}

};



this.divDetail_grdMenuList_ondrag = function(obj:nexacro.Grid,e:nexacro.GridDragEventInfo)

{

	var objDs = this.dsProjectMenuList;

	if( take.isDsModified(objDs) )

	{

		if (take.confirm(this, "info", "변경된 내역이 있습니다. 변경전 내용으로 복구 하시겠습니까?"))

		{

			objDs.reset();

		} else {

			obj.iscellmove = false;

		}



		return false;

	} else {

		obj.iscellmove = true;

 	}

};





this.divDetail_spnSort_onchanged = function(obj:nexacro.Spin,e:nexacro.ChangeEventInfo)

{

	var sMenuOrder, sNewOrder;

	var objDs;

	var nIdx, nSort, nOldSort;

	

	nSort = obj.value;

	

	if (nSort>0)

	{

		objDs = this.dsProjectMenuList;

		nRow = objDs.rowposition;

		

		sMenuOrder  = take.nvl(objDs.getColumn(nRow, "MENU_ORDER"));

		

		if (sMenuOrder!="")

		{

			nIdx = sMenuOrder.lastIndexOf(".");

			

			if (nIdx>=0)

			{

				nOldSort = parseInt(sMenuOrder.substr(nIdx+1));

				

				if (nSort==nOldSort) return;

				if (nSort>nOldSort) nSort++;

				if (nSort<nOldSort) nSort--;

				

				sNewOrder = sMenuOrder.substring(0,nIdx+1) + nSort.toString().lpad(3,"0");

				this.fnSetOrder(objDs, nRow, sNewOrder);				

			}

		}

	}	

};
/*********************************************************
* 4 사용자 FUNCTION 영역
********************************************************/
/**
 * fnInIt : 초기화 함수
 * @example this.fnInIt();
 */
this.fnInIt = function()
{
    var sTreeOpt = '{"use":"all", "treeindex":0, "parentcolid":"PARENT_MENU", "ordercolid":"MENU_ORDER", "treecallback":"fnTreeCallBack", "codecolid":"MENU_CD"}';    
    this.fv_objTree.setTakeTree(this,sTreeOpt);
    
	// 공통 코드조회 함수 호출
    this.fnCommonCode();

    var objCbo = this.divSearch.form.cboProjectNm;

	// 접속한 사용자가 프로젝트 관리자인 경우에만 검색조건 프로젝트 선택 가능
	objCbo.set_value(this.fv_sGdsProjectCd);
	if(this.fv_sGdsAdminYn == "Y"){
		objCbo.set_readonly(false);
	}
}

/**
 * fnCommonCode : 공통 코드조회
 * @example this.fnCommonCode();
 */
this.fnCommonCode = function ()
{
	var arrGroupCodes = ["00003", "00009", "00005", "00009", "00009"];
	var arrOutDs 	  = ["dsCboDeviceType", "dsCboUseYn", "dsCboMenuType", "dsCboMenuYn", "dsCboDetailUseYn"];
	var arrHeaderType = ["", "ALL", "", "", ""];

	take.tranCode(this, arrGroupCodes, arrOutDs, arrHeaderType,
	function(sId, nErrCd, sErrMsg)
	{
        var objDiv = this.divSearch.form;
		if (this.dsCboDeviceType.rowcount > 0){
			objDiv.cboDevice.set_index(0);
		}
		if (this.dsCboUseYn.rowcount > 0){
			objDiv.cboUseYn.set_index(0);
		}

		// 프로젝트 코드셀렉트
		take.tranSelect
		(
			this,
			"projectInfoCode",
			"ProjectManagement.projectInfoCode",
			"",
			"dsCboProjectCd",
			"",
			function(sId, nErrCd, sErrMsg)
			{
				var objDs = this.dsCboProjectCd;
				if (objDs.rowcount>0)
				{
					var nRow = objDs.insertRow(0)
					objDs.setColumn(nRow, "CODE", "");
					objDs.setColumn(nRow, "NAME", "선택");
				}

                this.fnSearch("projectMenuAllList");
			}
		)
	});
};

/**
 * fnLagnSearch : 다국어 정보 조회
 * @example this.fnLagnSearch();
 */
this.fnLagnSearch = function()
{
    var objDs;
    var sMlCd, sMenuCd, sProjectCd;
    var nRow;

    objDs = this.dsProjectMenuList;

    // 하단 그리드 '다국어 정보' 조회
    this.dsMultiLanguageInfo.clearData();
    nRow = objDs.rowposition;

    sMenuCd		= take.nvl(objDs.getColumn(nRow, "MENU_CD"), "");	 // 메뉴명
    sProjectCd  = take.nvl(objDs.getColumn(nRow, "PROJECT_CD"), ""); // 프로젝트명
    sMlCd       = take.nvl(objDs.getColumn(nRow, "ML_CD"), "");		 // 다국어 코드

    take.tranSelect
    (
        this,
        "multilanguageDetailList",
        "ProjectManagement.projectMenuLanguageList",
        "",
        "dsMultiLanguageInfo",
        "sProjectCd='" + sProjectCd + "' sMenuCd='" + sMenuCd + "' sMlCd='" + sMlCd + "'",
        "fnCallback"
    )
}

/**
 * fnTreeCallBack : 트리공통 콜백 함수
 * @example this.fnTreeCallBack(sGrdId, sGbn, nRow);
 */
this.fnTreeCallBack = function(sGrdId, sGbn, nRow)
{
    //alert("gubun --> " + sGbn + " / Row --> " + nRow)
    switch(sGbn)
    {
        case "add":
			//trace("add콜백 :: "+ nRow)
            this.fnAddMenu(this.dsProjectMenuList, nRow);
            break;

        case "del":
            break;

        case "move":
			var objDiv = this.divDetail.form;
			var objDs  = this.dsProjectMenuList;
			var nRow   = objDs.rowposition;
			var nRootRow;

			//20210120 정해원
			//PARENT_MENU 누락 방지
			var nParentRow   = objDiv.grdMenuList.getTreeParentRow(nRow);
			//var nP_ParentRow = objDiv.grdMenuList.getTreeParentRow(nParentRow);

			//if(nP_ParentRow > -1) nRootRow = nP_ParentRow;
			//else nRootRow = nParentRow;
			objDs.setColumn(nRow, "ROOT_MENU", objDs.getColumn(nParentRow, "ROOT_MENU"));
			objDs.setColumn(nRow, "PARENT_MENU", take.nvl(objDs.getColumn(nParentRow, "MENU_CD"), "0"));

			if (this.divDetail.form.grdMenuList.iscellmove==false) return;

			var sProjectCd = this.divSearch.form.cboProjectNm.value;
			objDs.setColumn(nRow, "PROJECT_CD", sProjectCd);
			//this.fv_nSaveBeforeRowType = objDs.getRowType(nRow);

			this.divDetail.form.grdMenuList.ismovecomplete = false;

			take.transaction
			(
				this,
				"projectMenuSave",
				"SVC_LOC::pm/projectMenuSave.do",
				"dsProjectMenuList=dsProjectMenuList:U dsFile=dsFile:U",
				"",
				"sProjectCd='"+sProjectCd+"''",
				"fnCallback"
			);
            break;

        default:
    }
}

/**
 * fnAddMenu : 트리 메뉴 추가 함수
 * @example this.fnAddMenu(objDs, nRow);
 */
this.fnAddMenu = function(objDs, nRow)
{
    var sPMenuCd, sPMenuNm, sPMenuType, sParentRootMenuCd, s;
    var objDetail, objGrid;
    var nPRow, nTreeParentRow, nTreeParentRow2;

    objDetail = this.divDetail.form;
    objGrid = objDetail.grdMenuList;

    //this.divDetail.form.grdMenuList.getTreeParentRow()

    nPRow = objGrid.getTreeParentRow(nRow, true);

    //if (nPRow<0) return;

    sPMenuType = objDs.getColumn(nPRow, "MENU_TYPE");

	nTreeParentRow    = objDetail.grdMenuList.getTreeParentRow(nRow);
	sParentRootMenuCd = objDs.getColumn(nTreeParentRow, "MENU_CD");
	nTreeParentRow2   = objDetail.grdMenuList.getTreeParentRow(nTreeParentRow);

	if(nTreeParentRow2 >= 0){
		sParentRootMenuCd = objDs.getColumn(nTreeParentRow2, "MENU_CD");
	}

    sPMenuCd = objDs.getColumn(nPRow, "MENU_CD");
    sPMenuNm = objDs.getColumn(nPRow, "MENU_NM");

	if (nPRow<0){
		objDs.setColumn(nRow, "MENU_LEVEL", "0");
	}

	// 최상위 대메뉴인 경우에는 부모메뉴 0 저장
	if(nTreeParentRow < 0){
		objDs.setColumn(nRow, "PARENT_MENU", "0");
	} else {
		objDs.setColumn(nRow, "PARENT_MENU", sPMenuCd);
	}

	objDs.setColumn(nRow, "ROOT_MENU", sParentRootMenuCd);
	objDs.setColumn(nRow, "PARENT_MENU_NM", sPMenuNm);
	objDs.setColumn(nRow, "MENU_TYPE", "02");
	objDs.setColumn(nRow, "DEVICE_TYPE", "01");
	objDs.setColumn(nRow, "USE_YN", "Y");
	objDs.setColumn(nRow, "DISPLAY_YN", "Y");

	if (sPMenuType=="03")
    {
        objDs.set_enableevent(false);
        objDs.deleteRow(nRow);
        objDs.set_enableevent(true);
        return;
    }

    this.divDetail.form.edtMenuNm.setFocus();
    this.divDetail.form.edtMenuNm.setSelect(0,20);
}

/**
 * fnDataDelete : 트리 데이터 삭제
 * @example this.fnDataDelete();
 */
this.fnDataDelete = function ()
{
	var objDs, objGrid;
	var sProjectCd, sMenuCd;
	var nRow;
	var arrFamilyRows;

	objGrid = this.divDetail.form.grdMenuList;
	objDs   = this.dsProjectMenuList;
	nRow    = objDs.rowposition;

	arrFamilyRows = take.getTreeFamilyRows(objGrid, 0, nRow, true);
	arrFamilyRows[arrFamilyRows.length] = nRow;

	objDs.set_enableevent(false);
	objDs.set_updatecontrol(false);

	for(var i=0; i<arrFamilyRows.length; i++){
		objDs.setRowType(arrFamilyRows[i], "U");
	}

	objDs.set_updatecontrol(true);
	objDs.set_enableevent(true);

	sProjectCd = objDs.getColumn(nRow, "PROJECT_CD");
	take.transaction
	(
		this,
		"projectMenuDelete",
		"SVC_LOC::pm/projectMenuDelete.do",
		"dsProjectMenuList=dsProjectMenuList:U",
		"",
		"PROJECT_CD='" + sProjectCd + "'",
		"fnCallback"
	)

};

/**
 * fnSetCboMenuType : 메뉴유형 '메뉴' 선택시 화면유형 선택 불가
 * @example this.fnSetCboMenuType();
 */
this.fnSetCboMenuType = function (sMenuTypeCd)
{
	var objDiv;
	var sMenyType;

	objDiv    = this.divDetail.form;
	sMenyType = take.nvl(objDiv.cboMenuType.value, "");

	if(sMenuTypeCd == "02"){
		objDiv.btnScreen.set_enable(false);
		this.fv_bMenuType = false;
	}
	if(sMenuTypeCd == "03" || sMenuTypeCd == "06"){
		objDiv.btnScreen.set_enable(true);
		this.fv_bMenuType = true;
	}
};


this.fnSetOrder = function(objDs, nRow, sChangeOrder)

{

	var arrRows, arrSort = new Array(), arrChildRow;

	var sNewOrder, sSort;

	var nArrLen, nNodeSort;

	

	arrRows = take.getTreeNodeRows(this.divDetail.form.grdMenuList, 0, nRow);

	

	if (arrRows!=-1)

	{

		nArrLen = arrRows.length;

		

		for (var i=0; i<nArrLen; i++)

		{

			if (arrRows[i]==nRow)

			{

				sMenuOrder = sChangeOrder;

			} else {

				sMenuOrder = take.nvl(objDs.getColumn(arrRows[i], "MENU_ORDER"),"");

			}

			

			if (sMenuOrder!="")

			{

				nIdx = sMenuOrder.lastIndexOf(".");

				if (nIdx>=0)

				{

					sSort = take.nvl(sMenuOrder.substr(nIdx+1),"");

					arrSort.push([sSort,arrRows[i]]);

				}

			}

			

		}

	}



	arrSort = arrSort.sort();

	

	objDs.set_enableevent(false);

	

	for (var j=0; j<nArrLen; j++)

	{

		nSubRow = arrSort[j][1];

		sMenuOrder = take.nvl(objDs.getColumn(nSubRow, "MENU_ORDER"),"");

		if (sMenuOrder!="")

		{

			sMenuNewOrder = sMenuOrder.substring(0,nIdx+1) + (j+1).toString().lpad(3,"0");

		}

		

		objDs.setColumn(nSubRow,"MENU_ORDER",sMenuNewOrder);

		

		arrChildRow = take.getTreeChildRows(this.divDetail.form.grdMenuList, 0, nSubRow);

		

		if (arrChildRow!=-1) this.fnChildOrder(objDs, arrChildRow[0], sMenuOrder, sMenuNewOrder);

	}

	

	objDs.set_enableevent(true);

};



this.fnChildOrder = function(objDs, nSubRow, sMenuOrder, sMenuNewOrder)

{

	var nLens, nRow, nIdx;

	var sOrder, sNewOrder;

	var arrRow, arrSubRow;

	

	arrRow = take.getTreeNodeRows(this.divDetail.form.grdMenuList, 0, nSubRow);

	

	if (arrRow!=-1)

	{

		nLens = arrRow.length;

		nIdx = sMenuOrder.length;

		for (var i=0; i<nLens; i++)

		{

			nRow = arrRow[i];

			sOrder = take.nvl(objDs.getColumn(nRow,"MENU_ORDER"),"");

			

			if (sOrder.substring(0,nIdx)==sMenuOrder)

			{

				sNewOrder = sMenuNewOrder + "." + sOrder.substr(nIdx+1);

				

				objDs.setColumn(nRow,"MENU_ORDER",sNewOrder);

				

				arrChildRow = take.getTreeChildRows(this.divDetail.form.grdMenuList, 0, nRow);

				if (arrChildRow!=-1)

				{

					this.fnChildOrder(objDs, arrChildRow[0], sOrder, sNewOrder);

				}

			}

		}

	}

};


/*********************************************************
 * 5 TRANSACTION OR CALLBACK 콜백 처리부분
 ********************************************************/
/**
* fnCallback : transaction callback
* @param  : svcId   - 서비스 아이디 (공통 콜백에서 넘어옴)
* @param  : errCd   - 에러코드 (공통 콜백에서 넘어옴)
* @param  : errMsg   - 에러메세지 (공통 콜백에서 넘어옴)
* @return : N/A
* @example :
*/
this.fnCallback = function(sId, nErrCd, sErrMsg)
{
    //Transaction 에러는 공통에서 처리

    //Transaction은 성공이나 실제 처리된게 없을 경우 처리
    if( sErrMsg == "SUCC" )
    {
        //Success Script
    } else {
        //Etc Script
    }

    switch(sId)
    {
        case "projectMenuAllList" : //메뉴리스트 조회
			var objDs 		= this.dsProjectMenuList;
			var nRow  		= objDs.rowposition;
			var objStaMaual = this.divDetail.form.staManualLink;
			var sManualTxt  = take.nvl(objDs.getColumn(nRow, "MANUAL_TXT"), "");

            if(sManualTxt != ""){
				objStaMaual.set_enable(true);
				objStaMaual.set_cursor("pointer");
				objStaMaual.set_text("등록됨");
			}else {
				objStaMaual.set_text("미등록");
			}

			var sChildRow = "";
			sChildRow = take.getTreeChildRows(this.divDetail.form.grdMenuList, 0, nRow);
			if(sChildRow != -1){
				this.divDetail.form.cboMenuType.set_readonly(true);
			}else{
				this.divDetail.form.cboMenuType.set_readonly(false);
			}

			break;

        case "multilanguageDetailList" :  //조회 콜백
            //trace("this.dsMultiLanguageInfo.rowcount --> " + this.dsMultiLanguageInfo.rowcount);
            break;

        case "projectMenuDelete" : 		//메뉴 삭제
			this.fnSearch("projectMenuAllList");
            break;

        case "projectMenuSave" : 	   //메뉴 저장
			var objDs = this.dsProjectMenuList;
			var nMenuNm  = objDs.getColumn(objDs.rowposition, "MENU_NM");

			// RowType 값이 신규 추가된 Row의 상태 라면 권한 관리 이동 여부 메시지 표시
			if(this.fv_nSaveBeforeRowType == 2)
			{
				var bRowChange = take.confirm(this, "question", "{name} 권한관리 화면으로 {text}하시겠습니까?", { name : nMenuNm, text : "이동"});
				if(bRowChange)
				{
					// 권한관리 화면 이동 코드 작성		M0009		PM040
					take.mdiOpenMenu(this, "M0009", "", "", true);
				}
			}
            this.fnSearch("projectMenuAllList");
            break;

        case "Save transation id 01" :  //저장 콜백
            //Script
            break;
        default :
            break;
    }
}

/**

 * fnPopCallback : 다국어팝업 콜백

 * @example this.fnPopCallback();

 */

this.fnPopCallback = function (sId, nReturnVal)

{

	if(sId == "addMultiLanguage"){

		var nRow = this.dsProjectMenuList.rowposition;



		if(take.nvl(nReturnVal, "") != "") {

			nReturnVal = nReturnVal.split(",")[0];

			this.dsProjectMenuList.setColumn(nRow, "ML_CD", nReturnVal);

		} else return;



		this.dsMultiLanguageInfo.clearData();

		take.tranSelect(this, "multilanguageDetailList", "SystemCommon.multilanguageDetailList", "", "dsMultiLanguageInfo", "sMlCd='" + nReturnVal + "'", "fnCallback");

	}

};

this.fnDropCheck = function(sName, sGbn, objUserData, objInfo)
{
	console.dir(objUserData);
	console.dir(objInfo);

	if (sGbn=="drop")
	{
		if (objInfo.gubun=="child")
		{
			if (this.dsProjectMenuList.getColumn(objInfo.row,"MENU_TYPE")=="03")
			{
				return false;
			}
		}
	}
}

//트리 그리드 세팅
this.fv_objTree._setTakeTreeGrid = function()
{    
    var pThis, opjTreeProp;
    var sTreeProp;
    var nCnt;
    
    sTreeProp = take.nvl(this.taketree,"");
    // taketree 항목  
    // {
    //     use : {  //필수 기능 사용 옵션 all일 경우 전부 true로 인식
    //               add  : true  //(boolean) true or false 노드 추가 여부
    //               del  : true  //(boolean) true or false 노드 삭제 여부
    //               move : false //(boolean) true or false 노드 이동 여부
    //           }
    //   , treeindex    : 0               //(number) 옵션 : 트리 컬럼 인덱스 생략시 그리드의 첫번째 treeitemcontrol 컬럼 index
    //   , codecolid    : "MENU_CD"
    //   , parentcolid  : "PARENT_MENU"  //(string) 필수 : 트리 부모 컬럼 아이디
    //   , ordercolid   : "MENU_ORDER"   //(string) 옵션 : 트리 정렬 컬럼 아이디
    //   , treecallback : "fnTreeCallBack"  //(string) 옵션 : callback 함수명
    //}
    //
    //예제 1 :  {parentcolid:"parent_menu", ordercolid:"menu_order"} 
    //예제 2 :  {use:"all", treeindex:0, parentcolid:"parent_menu", ordercolid:"menu_order"}
    //예제 3 :  {use:{add:true,del:true,move:false}, treeindex:0, treekeycolid:"MENU_CD", parentcolid:"parent_menu", ordercolid:"menu_order"}
    
    //parentform이 없을 경우 부모폼 세팅
    if (take.nvl(this.parentform,"")=="")
    {
        this.parentform = take.getParentForm(this,true);
        pThis = this.parentform;
    }
    
    //taketree에 값이 있는지 여부 확인
    if (sTreeProp=="") 
    {
        take.debug(pThis, "taketree 프로퍼티에 값 없어 기능을 사용 할 수 없습니다.");
        return;
    }
    
    //taketree값이 Object인지 여부 확인후 Object화
    if (take.isObject(sTreeProp))
    {
        objTreeProp = sTreeProp;
    } else {
        objTreeProp = take.StringToObject(sTreeProp);
        this.taketree = objTreeProp;
    }
    
    //taketree가 정상적으로 Object화 가 안된경우 ""
    if (objTreeProp=="")
    {
        take.debug(pThis, "taketree 프로퍼티가 Object 형이 아닙니다. ex) {'key0':'value0', 'key1':'value1'...}");
        return;
    }
    
    //use 가 있는지 여부
    if (objTreeProp.hasOwnProperty("use")) //있을경우
    {
        //all 또는 "" 없을 경우 전체 true
        if (take.nvl(objTreeProp.use,"")=="all" || take.nvl(objTreeProp.use,"")=="") 
        {
            //objTreeProp.use = {add:true, del:true, move:true};
            objTreeProp.use = {add:true, del:true};
        }
    } else { //없을경우 전체 true
        //objTreeProp["use"] = {add:true, del:true, move:true};
        objTreeProp["use"] = {add:true, del:true};
    }
    
    //use add, del 가 있는지 여부
    if (!objTreeProp.use.hasOwnProperty("add")) objTreeProp.use["add"] = true;
    if (!objTreeProp.use.hasOwnProperty("del")) objTreeProp.use["del"] = true;    
	//if (!objTreeProp.use.hasOwnProperty("move")) objTreeProp.use["move"] = true;    
    
    //treeindex 가 있는지 여부
    if (!objTreeProp.hasOwnProperty("treeindex"))
    {
        //tree index 찾기
        nCnt = this.getCellCount("Body");
        
        if (nCnt>0)
        {
            for (var i=0;i<nCnt;i++)
            {
                if (this.getCellProperty( "body", i, "displaytype" )=="treeitemcontrol")
                {
                    this.treeindex = i;
                    break;
                }
            }
        } else {
            take.debug(pThis, "트리형 그리드가 아닙니다.");
        }
    } else {
        this.treeindex = nexacro.toNumber(objTreeProp.treeindex);
    }
    
    //parentcolid 가 있는지 여부
    if (objTreeProp.hasOwnProperty("codecolid"))
    {
        this.codecolid = objTreeProp.codecolid;
    }
    
    //parentcolid 가 있는지 여부
    if (objTreeProp.hasOwnProperty("parentcolid"))
    {
        this.parentcolid = objTreeProp.parentcolid;
    }
    
    //ordercolid 가 있는지 여부
    if (objTreeProp.hasOwnProperty("ordercolid"))
    {
        this.ordercolid = objTreeProp.ordercolid;
    }
    
    //treekeycolid 가 있는지 여부
    //if (objTreeProp.hasOwnProperty("trrekeycolid"))
    //{
    //    this.treekeycolid = objTreeProp.treekeycolid;
    //}


    //treecallback 가 있는지 여부
    if (objTreeProp.hasOwnProperty("treecallback"))
    {
        this.treecallback = objTreeProp.treecallback;
    }

	//treeprecheck 가 있는지 여부
    if (objTreeProp.hasOwnProperty("treeprecheck"))
    {
        this.treeprecheck = objTreeProp.treeprecheck;
    }
    
    // 추가, 삭제 기능 활성화
    if (objTreeProp.use.add==true || objTreeProp.use.del==true)
    {
        this.addEventHandler("onrbuttondown",  this.treeShowMenu,     pThis);
    }
    
    //이동 기능 활성화
    if (objTreeProp.use.move)
    {
        this.addEventHandler("ondrag",         this.treeOnDrag,       pThis);
        this.addEventHandler("ondragmove",     this.treeOnDragMove,   pThis);
        this.addEventHandler("ondrop",         this.treeOnDrop,       pThis);
        this.addEventHandler("ondragleave",    this.treeOnDragLeave,  pThis);
    }
    
};

//트리 그리드 스크립트 세팅
this.fv_objTree.setTakeTree = function(pThis, sOption)
{
    this.taketree = sOption;
    this.parentform = pThis;
    this._setTakeTreeGrid();
};

this.fv_objTree.treeShowMenu = function(obj, e)
{
    var pThis, objTreePopMenu, objTreePopMenuDs, objTreeProp;
    var nFRow;
    var bShow;

    pThis = obj.parentform;
    objTreePopMenuDs = take.nvl(pThis.objects["_tdsTreePopMenu"],"");
    objTreeProp = obj.taketree;
    
    obj.getBindDataset().set_rowposition(e.row);
    
    if (objTreePopMenuDs == "")
    {
		objTreePopMenuDs = new Dataset;
		objTreePopMenuDs.load();
		pThis.addChild("_tdsTreePopMenu", objTreePopMenuDs);

		var sDsXml =  "<Dataset id=\"_tdsTreePopMenu\">                                  \n";
			sDsXml += "  <ColumnInfo>                                                    \n";
			sDsXml += "    <Column id=\"captioncolumn\"  type=\"STRING\" size=\"256\"/>  \n";
			sDsXml += "    <Column id=\"idcolumn\"       type=\"STRING\" size=\"256\"/>  \n";
			sDsXml += "    <Column id=\"levelcolumn\"    type=\"STRING\" size=\"256\"/>  \n";
			sDsXml += "    <Column id=\"enablecolumn\"   type=\"STRING\" size=\"256\"/>  \n";
			sDsXml += "    <Column id=\"userdatacolumn\" type=\"STRING\" size=\"256\"/>  \n";
			sDsXml += "    <Column id=\"visible\"        type=\"STRING\" size=\"256\"/>  \n";
			sDsXml += "  </ColumnInfo>                                                   \n";
			sDsXml += "  <Rows>                                                          \n";
            
            if (objTreeProp.use.add)
            {
                sDsXml += "    <Row>                                                         \n";
                sDsXml += "      <Col id=\"captioncolumn\">동일그룹(노드) 추가</Col>       \n";
                sDsXml += "      <Col id=\"idcolumn\">addlevel</Col>                         \n";
                sDsXml += "      <Col id=\"levelcolumn\">0</Col>                             \n";
                sDsXml += "    </Row>                                                        \n";
                sDsXml += "    <Row>                                                         \n";
                sDsXml += "      <Col id=\"captioncolumn\">하위그룹(노드) 추가</Col>       \n";
                sDsXml += "      <Col id=\"idcolumn\">addchildlevel</Col>                    \n";
                sDsXml += "      <Col id=\"levelcolumn\">0</Col>                             \n";
                sDsXml += "    </Row>                                                        \n";
            }
            
            if (objTreeProp.use.del)
            {
                sDsXml += "    <Row>                                                         \n";
                sDsXml += "      <Col id=\"captioncolumn\">삭제</Col>                       \n";
                sDsXml += "      <Col id=\"idcolumn\">deltree</Col>                         \n";
                sDsXml += "      <Col id=\"levelcolumn\">0</Col>                            \n";
                sDsXml += "    </Row>	                                                    \n";
            }
            
            sDsXml += "</Rows>                                                          \n";
			sDsXml += "</Dataset>                                                       \n";
        
		objTreePopMenuDs.loadXML(sDsXml);
	}

    objTreePopMenu = take.nvl(pThis.components["pmTreePop"],"");

    if (objTreePopMenu=="")
	{
		objTreePopMenu = new PopupMenu();
		objTreePopMenu.init("pmTreePop", "absolute", 0, 0, 60, 60, null, null);
		pThis.addChild("pmTreePop", objTreePopMenu);

		// Tree Grid 마우스 우측 메뉴 onmenuclickHandler Event
		objTreePopMenu.addEventHandler("onmenuclick", obj.treeShowPopUp, pThis);

		objTreePopMenu.set_innerdataset(objTreePopMenuDs.name);
		objTreePopMenu.set_captioncolumn("captioncolumn");
		objTreePopMenu.set_idcolumn("idcolumn");
		objTreePopMenu.set_levelcolumn("levelcolumn");
		objTreePopMenu.set_enablecolumn("enablecolumn");
		objTreePopMenu.set_userdatacolumn("userdatacolumn");

        objTreePopMenu.set_itemheight(25);
        
		objTreePopMenu.show();
	}
    
    //head일 경우 동일노드 추가만 제공
    if (e.row<0)
    {
       bShow = false;
       if (e.row<-1) return false;
    } else { //body일경우 동일노드 추가, 하위노드 추가, 삭제 기능 제공
        bShow = true;
    }
    
    nFRow = objTreePopMenuDs.findRow(objTreePopMenu.idcolumn, "addchildlevel");
    if (nFRow >= 0) objTreePopMenuDs.setColumn(nFRow, objTreePopMenu.enablecolumn, bShow);
    nFRow = objTreePopMenuDs.findRow(objTreePopMenu.idcolumn, "deltree");
    if (nFRow >= 0) objTreePopMenuDs.setColumn(nFRow, objTreePopMenu.enablecolumn, bShow);
        
    objTreePopMenu.taketree = obj;
    //objTreePopMenu.trackPopupByComponent(obj, e.canvasx - 60, e.canvasy - 20);
    objTreePopMenu.trackPopupByComponent(obj, e.canvasx, e.canvasy);
};

//트리 팝업
this.fv_objTree.treeShowPopUp = function(obj, e)
{
    var objGrid, pThis;
    
    objGrid = obj.taketree;
    pThis = objGrid.parentform;
    
    switch(e.id)
    {
        case "addlevel" : 
            objGrid._takeTreeAdd(pThis);
            break;
            
        case "addchildlevel" : 
            objGrid._takeTreeAddChild(pThis);
            break;
            
        case "deltree" :
            objGrid._takeTreeDel(pThis);
            break;
    }
};

//트리 드래그 이벤트
this.fv_objTree.treeOnDrag = function(obj, e)
{
	e.userdata = e.row;
    
	if(e.cell != obj.treeindex) return false;

	this.fv_objTree.treeDragInfo(obj, e.row, e.cell);
	//this.fv_nMoveRow= e.row;
	return true;
};

//트리 데이터
this.fv_objTree.treeDragInfo = function(objGrid, nRow, nIdx)
{
	var pThis, objDs, objStaInfo, objStaPos, objStaLine, objRect;
    var sColumn, sText;
    
    objDs = objGrid.getBindDataset();
    sColumn = objGrid.getCellProperty("body", nIdx, "text");
    sColumn = sColumn.replace("bind:","");
    sText = objDs.getColumn(objGrid.getDatasetRow(nRow), sColumn);
    pThis = objGrid.parentform;
    objRect = objGrid.getCellRect(nRow, nIdx);
    
    objStaInfo = take.nvl(pThis["_staTreeItemInfo"], "");    
    if (objStaInfo=="")
    {
        objStaInfo = new Static("_staTreeItemInfo", objGrid.getOffsetLeft(), objGrid.getOffsetTop(), objRect.width, objRect.height, null, null);        
        pThis.addChild("_staTreeItemInfo", objStaInfo); 
        objStaInfo.show(); 
        objStaInfo.set_background("#eeeeee");
        objStaInfo.set_border("2px dotted #bbbbbb");
        objStaInfo.set_usedecorate(true);
    }
    
    objStaInfo.set_text(sText);
    objStaInfo.treeitemtext = sText;
    objStaInfo.set_visible(true);
    objStaInfo.set_enable(true);
    
    objStaPos = take.nvl(pThis["_staTreeItemPos"], "");    
    if (objStaPos=="")
    {
        objStaPos = new Static("_staTreeItemPos", objGrid.getOffsetLeft(), objGrid.getOffsetTop(), 10, 10, null, null);        
        pThis.addChild("_staTreeItemPos", objStaPos); 
        objStaPos.show(); 
        objStaPos.set_background("url('theme://images/ico_WF_group01.png') no-repeat left center");
        objStaPos.set_border("0px solid");        
    }
    
    objStaPos.set_visible(true);
    objStaPos.set_enable(true);
    
    objStaLine = take.nvl(pThis["_staTreeItemLine"], "");    
    if (objStaLine=="")
    {
        objStaLine = new Static("_staTreeItemLine", objGrid.getOffsetLeft(), objGrid.getOffsetTop(), 25, 1, null, null);        
        pThis.addChild("_staTreeItemLine", objStaLine); 
        objStaLine.show();         
        objStaLine.set_border("1px solid #e55723");
        objStaLine.set_enableevent(true);
    }
    
    objStaLine.set_visible(true);
    objStaLine.set_enable(true);

}

//트리 드래그 무브 이벤트
this.fv_objTree.treeOnDragMove = function(obj, e)
{
    var nX, nTop, nGap, nHeadCnt, nDiff, nItemTop;
    var sNewGbn;
    var objItemInfo, objRect, objHeadInfo, pThis, objParentXY;
    
    pThis = obj.parentform;    
    nGap = 15;
    objParentXY = take.getParentXY(obj);
    ////this._staTreeItemInfo.move(e.canvasx, e.canvasy + nexacro.toNumber(obj.getFormatRowProperty(0,"size")));
    //nTop = nexacro.toNumber(obj.top); //_getWindowPosition().y==>top, _getWindowPosition().x==>left
    nTop = objParentXY.y;
    objHeadInfo = take.getGridHeadInfo(obj);    
    objRect = obj.getCellRect(e.row, 0);
    
    nX = objParentXY.x + e.canvasx;    
    //nDiff = e.canvasy-(nexacro.toNumber(obj.top)+objRect.top);
    nDiff = e.canvasy-objRect.top;
    //trace("e.row --> " + e.row + " / diff --> " + nDiff + " / e.canvasy -->" + e.canvasy + " / nTop --> " + nTop + " / objRect.top --> " + objRect.top);
    
    if (nDiff<=(objRect.height*0.25))
    {
        nItemTop = objRect.top+nTop+2;
        //trace("Up --> " + nItemTop);
        sNewGbn = "prev";
        sText = "<fc v='#e55723'>(▲)</fc> ";
    } else if (nDiff>=(objRect.height*0.5)) {
        nItemTop = objRect.top+nTop+objRect.height-3;
        //trace("Down --> " + nItemTop);
        sNewGbn = "next";
        sText = "<fc v='#e55723'>(▼)</fc> ";
    } else {
        //nItemTop = e.canvasy;
        nItemTop = objRect.top+nTop+(objRect.height/2);
        //trace("Normal --> " + nItemTop);
        sNewGbn = "child";
        sText = "<fc v='#e55723'>(◆)</fc> ";
    }
    
    this._staTreeItemPos.move(objParentXY.x, nItemTop-4);
    this._staTreeItemLine.move(objParentXY.x, nItemTop); 
    
    objItemInfo = this._staTreeItemInfo;
    
    objItemInfo.set_text(sText + objItemInfo.treeitemtext);
    //objItemInfo.move(nX+nGap, e.canvasy+nexacro.toNumber(obj.top)+nGap);
    objItemInfo.move(nX+nGap, e.canvasy+nTop+nGap);
    objItemInfo.treeinsinfo = {gubun:sNewGbn, row:e.row};
    
};

//트리 드롭 이벤트
this.fv_objTree.treeOnDrop = function(obj, e)
{
    var objInfo;
    var pThis = obj.parentform;
	var bRtn;
	
    this._staTreeItemInfo.set_visible(false);
    this._staTreeItemInfo.set_enable(false);
    
    this._staTreeItemPos.set_visible(false);
    this._staTreeItemPos.set_enable(false);
    
    this._staTreeItemLine.set_visible(false);
    this._staTreeItemLine.set_visible(false);

    objInfo = this._staTreeItemInfo.treeinsinfo;
    
	if (take.nvl(obj.treeprecheck, "")!="")
	{
        if (take.isFunction(pThis[obj.treeprecheck])) 
        {
            bRtn =pThis[obj.treeprecheck].call(pThis, this.name, "drop", e.userdata, objInfo);
        } else {			
            take.debug(pThis.name + "." + this.name + ".treeprecheck(" + obj.treeprecheck + ")", "Tree pre check 함수가 없습니다.");
		}
    }
	
	if (bRtn==false) return false;
	
	if (obj.iscellmove==true)
	{		
		this.fv_objTree.treeDataMove(obj, {gubun:objInfo.gubun, beforerow:e.userdata, newrow:objInfo.row});
		//obj.ismovecomplete= true;
    }
    objInfo = null;
}

//트리 드래그 리브 이벤트
this.fv_objTree.treeOnDragLeave = function(obj, e)
{
    //trace("dragleave");
	this._staTreeItemInfo.set_visible(false);
    this._staTreeItemInfo.set_enable(false);
    
    this._staTreeItemPos.set_visible(false);
    this._staTreeItemPos.set_enable(false);
    
    this._staTreeItemLine.set_visible(false);
    this._staTreeItemLine.set_visible(false);
    
    this._staTreeItemInfo.treeinsinfo = null;
    
}

//트리데이터무브이벤트
this.fv_objTree.treeDataMove = function(obj, objInfo)
{
    var nNRow, nBRow, nIdx, nCurLev, nCnt, nDeffLev;
    var sGbn, sColumn, sPCode, sPKeyCode;
    var objDs;
    var arrChild;
    
    pThis = obj.parentform;
    objDs = obj.getBindDataset();
    nIdx = obj.treeindex;
    nNRow = objInfo.newrow;
    nBRow = objInfo.beforerow;
    sGbn = objInfo.gubun;    
    sColumn = obj.getCellProperty("body", nIdx, "treelevel");
    sColumn = sColumn.replace("bind:","");
    nCurLev = nexacro.toNumber(objDs.getColumn(nNRow, sColumn));
    
    //sPCode = objDs.getColumn(nNRow, obj.parentcolid);    
    
    if (sGbn=="child")
    {
        nCurLev++;
        if (nNRow<nBRow)
        {
            nNRow++;
        }
        
        if (nNRow==nBRow) return false;
        
        sPCode = objDs.getColumn(nNRow, take.getBindColName(obj, nIdx));   
        sPKeyCode = objDs.getColumn(nNRow, obj.parentcolid); 
        
    } else if (sGbn=="prev") {
        if (nNRow>nBRow)
        {
            nNRow--;
        } 
        
        if (nNRow==nBRow) return false;
        
    } else if (sGbn=="next") {
        if (nCurLev != nexacro.toNumber(objDs.getColumn(nBRow, sColumn)))
        {
            //take.debug(pThis, "동일 레벨만 이동 할 수있습니다.");
            take.alert(pThis, "Info", "동일 레벨만 이동 할 수있습니다.");
            return false;
        } else {
            if(take.getTreeChildRows(obj, nIdx, nNRow)!=-1)
            {
                take.alert(pThis, "Info", "해당 위치로 이동 할 없습니다.");
                return false;
            }
        }
                
        if (nNRow<nBRow)
        {
            nNRow++;
        }
        
        if (nNRow==nBRow) return false;
    }

    arrChild = take.getTreeFamilyRows(obj, nIdx, nBRow);

    if (arrChild!=-1)
    {
        if (arrChild.indexOf(nNRow)>=0)
        {
            //take.debug(pThis, "선택한 그룹의 하위로 이동할 수 없습니다.");
            take.alert(pThis, "Info", "선택한 그룹의 하위로 이동할 수 없습니다.");
            return false;
        }
    }
    
    //trace("sGbn --> " + sGbn + " / before row --> " + nBRow + " / new row --> " + nNRow);
    nNRow = objDs.moveRow(nBRow, nNRow);

    if (nNRow>=0)
    {
        //nDeffLev = nexacro.toNumber(objDs.getColumn(nNRow, sColumn))-nCurLev;
        nDeffLev = nCurLev - nexacro.toNumber(objDs.getColumn(nNRow, sColumn));
        
//        sPKeyCode = objDs.getColumn(obj.getTreeParentRow(nNRow), obj.codecolid);
		objDs.setColumn(nNRow, sColumn, nCurLev);
        //sPKeyCode = objDs.getColumn(nNRow, obj.parentcolid);
        objDs.setColumn(nNRow, obj.parentcolid, sPKeyCode);
    } else {
        //take.debug(pThis, "이동 실패");
        take.alert(pThis, "Info", "이동 실패");
        return false;
    }

    if (arrChild!=-1)
    {
        nCnt = arrChild.length;
        if (nCnt>0)
        {
            //nNRow++;
            //nCurLev++;

            for (var i=nCnt-1; i>=0; i--)
            {
                if (nNRow>arrChild[i]){
                    nBRow = arrChild[i]-1;
                } else if (nNRow<arrChild[i]) {                    
                    nBRow = arrChild[i] + ((nCnt-1)-i);
                    if (nCnt-1==i)
                    {
                        nNRow++;
                    } else {                     
                        nNRow;
                    }
                }
                
                nNRow = objDs.moveRow(nBRow, nNRow);

                if (nNRow>=0)
                {
                    objDs.setColumn(nNRow, sColumn, nexacro.toNumber(objDs.getColumn(nNRow, sColumn)) + nDeffLev);
                    //objDs.setColumn(nNRow, obj.parentcolid, sPCode);
                } else {
                    take.debug(pThis, "이동 실패");
                    return false;
                }
            }
        } 
    }
    
    //obj.treeInitOrder(nCurLev);
    obj.treeInitOrder();
    
    if (take.nvl(obj.treecallback, "")!="")
	{
        if (take.isFunction(pThis[obj.treecallback])) 
        {
            pThis[obj.treecallback].call(pThis, this.name, "move", "");
        } else {			
            take.debug(pThis.name + "." + this.name + ".treecallback(" + sCallBack + ")", "Tree CallBack 함수가 없습니다.");
		}
    }
    
    return true;
}

//트리에 동일 레벨 추가
this.fv_objTree._takeTreeAdd = function(pThis, nIdx)
{
    var nRow, nNRow, nCurLev, nTRow, nRowType;
    var objDs, pThis;
    var arrRows;
    var sColumn;

    pThis = this.parentform;
    objDs = this.getBindDataset();
    nIdx = take.nvl(nIdx, this.treeindex);
    nRow = objDs.rowposition;
    nTRow = this.getTreeRow(nRow);
	nRowType = objDs.getRowType(nRow);
    
	//20210120 정해원
	//노드추가 -> 노드추가 하면 저장 할 때 
	//상위노드의 MENU_CD가 생성되기 전이라 오류발생
	//메세지 처리 추가 (저장 후 진행해주세요)
	if (nRowType != Dataset.ROWTYPE_NORMAL && nRowType != Dataset.ROWTYPE_EMPTY) {
		take.alert(pThis, "info", "저장 후 진행해주시기 바랍니다.");
		return;
	}
	
    this.selectRow(nTRow, false);
    
    arrRows = take.getTreeNodeRows(this, nIdx, nRow);   
    if (arrRows!=-1)
    {
        nNRow = Math.max.apply(null, arrRows);
    }
    
    arrRows = take.getTreeFamilyRows(this, nIdx, nNRow);
    if (arrRows!=-1)
    {
        nNRow = Math.max.apply(null, arrRows);
    }

    nNRow = objDs.insertRow(nNRow+1);

    if (nNRow>=0)
    {
        sColumn = this.getCellProperty("body", nIdx, "treelevel");
        sColumn = sColumn.replace("bind:","");

        nCurLev = nexacro.toNumber(objDs.getColumn(nRow, sColumn), 0);

        objDs.setColumn(nNRow, sColumn, nCurLev);
        objDs.setColumn(nNRow, take.getBindColName(this, nIdx), "new item");
        objDs.setColumn(nNRow, this.parentcolid, objDs.getColumn(nRow, this.parentcolid));
        
        //this.treeInitOrder(nCurLev);
    }

    objDs.set_rowposition(nNRow);
    
    nTRow = this.getTreeRow(nNRow)
    this.selectRow(nTRow);
    
    this.treeInitOrder();
    
    if (take.nvl(this.treecallback, "")!="")
	{
        if (take.isFunction(pThis[this.treecallback])) 
        {
            pThis[this.treecallback].call(pThis, this.name, "add", nNRow);
        } else {			
            take.debug(pThis.name + "." + this.name + ".treecallback(" + sCallBack + ")", "Tree CallBack 함수가 없습니다.");
		}
    }
    
    return nNRow;
};

//트리에 하위 레벨 추가
this.fv_objTree._takeTreeAddChild = function(pThis, nIdx)
{
    var nRow, nNRow, nCurLev, nTRow, nRowType;
    var objDs, pThis;
    var sColumn;
    
    pThis = this.parentform;
    objDs = this.getBindDataset();
    nRow = objDs.rowposition;
    nIdx = take.nvl(nIdx, this.treeindex);
    nTRow = this.getTreeRow(nRow);
	nRowType = objDs.getRowType(nRow);
    
	//20210120 정해원
	//노드추가 -> 노드추가 하면 저장 할 때 
	//상위노드의 MENU_CD가 생성되기 전이라 오류발생
	//메세지 처리 추가 (저장 후 진행해주세요)
	if (nRowType != Dataset.ROWTYPE_NORMAL && nRowType != Dataset.ROWTYPE_EMPTY) {
		take.alert(pThis, "info", "저장 후 진행해주시기 바랍니다.");
		return;
	}
	
    this.selectRow(nTRow, false);
	
    if (this.isTreeLeafRow(nTRow, true))
    {
        nNRow = objDs.insertRow(nRow+1);
    } else { 
        nNRow = objDs.insertRow(Math.max.apply(null, take.getTreeFamilyRows(this, nIdx, nRow))+1);
    }

    if (nNRow>=0)
    {
        sColumn = this.getCellProperty("body", nIdx, "treelevel");
        sColumn = sColumn.replace("bind:","");
        
        nCurLev = nexacro.toNumber(objDs.getColumn(nRow, sColumn), 0)+1;
        
        objDs.setColumn(nNRow,sColumn,nCurLev);
        objDs.setColumn(nNRow, take.getBindColName(this, nIdx), "new item");
        objDs.setColumn(nNRow, this.parentcolid, objDs.getColumn(nRow, this.parentcolid));
        
        //this.treeInitOrder(nCurLev);
    }
    
    nTRow = this.getTreeRow(nNRow);
    this.selectRow(nTRow);
    
    this.treeInitOrder();
    
    if (take.nvl(this.treecallback, "")!="")
	{
        if (take.isFunction(pThis[this.treecallback])) 
        {
            pThis[this.treecallback].call(pThis, this.name, "add", nNRow);
        } else {			
            take.debug(pThis.name + "." + this.name + ".treecallback(" + sCallBack + ")", "Tree CallBack 함수가 없습니다.");
		}
    }
    
    return nNRow;    
};

//트리 아이템 삭제
this.fv_objTree._takeTreeDel = function(pThis, nIdx)
{
    var nCnt, nRow, nCurLev;
    var objDs, pThis;
    var arrRows;
    var sColumn;

    objDs = this.getBindDataset();
    nRow = objDs.rowposition;
    nIdx = take.nvl(nIdx, this.treeindex);    
    //sColumn = obj.getCellProperty("body", nIdx, "treelevel");
    //sColumn = sColumn.replace("bind:","");  
    //nCurLev = nexacro.toNumber(objDs.getColumn(nRow, sColumn));
    
    if (this.isTreeLeafRow(nRow, true))
    {
        objDs.deleteRow(nRow);
    } else {

        arrRows = take.getTreeFamilyRows(this, nIdx, nRow);
        
        nCnt = arrRows.length-1;
        
        //trace("arrRows --> " + arrRows);
        
        //반복 필요
        for (var i=nCnt; i>=0; i--)
        {
            //trace("arrRows["+i+"] --> " + arrRows[i]);
            objDs.deleteRow(arrRows[i]);
        }
        
        //trace("nRow --> " + nRow);
        objDs.deleteRow(nRow);
    }

    if (nRow==objDs.rowcount) nRow = nRow-1;
    this.selectRow(this.getTreeRow(nRow));
    
    //this.treeInitOrder(nCurLev);
    this.treeInitOrder();
    
    if (take.nvl(this.treecallback, "")!="")
	{
        if (take.isFunction(pThis[this.treecallback])) 
        {
            pThis[this.treecallback].call(pThis, this.name, "del", "");
        } else {			
            take.debug(pThis.name + "." + this.name + ".treecallback(" + sCallBack + ")", "Tree CallBack 함수가 없습니다.");
		}
    }
};

//this.fv_objTree.treeInitOrder = function(sLvl)
//{   
//    this._setTreeOrder(sLvl);
//}

this.fv_objTree.treeInitOrder = function()
{
    var objLvlInfo;
        
    objLvlInfo = take.getTreeLevelInfo(this, this.treeindex);
    
    for (var i=objLvlInfo.min;i<=objLvlInfo.max;i++)
    {
        this._setTreeOrder(i);
    }
}

this.fv_objTree._setTreeOrder = function(nLvl)
{
    var arrRows;
    var nIdx, nCnt, nPRow, nNo=1;
    var objDs;
    var sColId, sPOrder, sOrder;
    
    nIdx = this.treeindex;
    arrRows = take.getTreeLevRows(this, nIdx, nLvl);
    nCnt = arrRows.length;
    
    if (nCnt<=0) return false;
    
    objDs = this.getBindDataset();
    sColId = this.ordercolid;
    
    objDs.set_enableevent(false);
    
    for (var i=0; i<nCnt; i++)
    {
        nPRow = this.getTreeParentRow(arrRows[i]);
        
        if (nPRow>=0)
        {
            sPOrder = objDs.getColumn(nPRow,sColId);
        } else {
            sPOrder ="";
        }
        
        if (nPRow!=this.getTreeParentRow(arrRows[i-1])) nNo=1;
        
        sOrder = (sPOrder==""?"": sPOrder+".") + nNo.toString().padLeft(3,"0");
        
        objDs.setColumn(arrRows[i],sColId,sOrder);
        
        nNo++;
    }
    
    objDs.set_enableevent(true);
    
}

// this.fv_objTree._setTreeOrder = function(nLvl)
// {
//     var arrRows;
//     var nIdx, nCnt, nPRow, nNo=1;
//     var objDs;
//     var sColId, sPOrder, sOrder;
//     
//     nIdx = this.treeindex;
//     arrRows = take.getTreeLevRows(this, nIdx, nLvl);
//     nCnt = arrRows.length;
//     
//     if (nCnt<=0) return false;
//     
//     objDs = this.getBindDataset();
//     sColId = this.ordercolid;
//     
//     objDs.set_enableevent(false);
//     
//     for (var i=0; i<nCnt; i++)
//     {
//         nPRow = this.getTreeParentRow(arrRows[i]);
//         
//         if (nPRow>=0)
//         {
//             sPOrder = objDs.getColumn(nPRow,sColId);
//         } else {
//             sPOrder ="";
//         }
//         
//         if (nPRow!=this.getTreeParentRow(arrRows[i-1])) nNo=1;
//         
//         sOrder = (sPOrder==""?"": sPOrder+".") + nNo.toString().padLeft(3,"0");
//         
//         objDs.setColumn(arrRows[i],sColId,sOrder);
//         
//         nNo++;
//     }
//     
//     objDs.set_enableevent(true);
//     
// }]]></Script>
    <Bind>
      <BindItem id="item0" compid="divDetail.form.staParentMenu" propid="text" datasetid="dsProjectMenuList" columnid="PARENT_MENU_NM"/>
      <BindItem id="item1" compid="divDetail.form.cboDevice" propid="value" datasetid="dsProjectMenuList" columnid="DEVICE_TYPE"/>
      <BindItem id="item2" compid="divDetail.form.cboMenuType" propid="value" datasetid="dsProjectMenuList" columnid="MENU_TYPE"/>
      <BindItem id="item3" compid="divDetail.form.cboUseYn" propid="value" datasetid="dsProjectMenuList" columnid="USE_YN"/>
      <BindItem id="item4" compid="divDetail.form.edtScreen" propid="value" datasetid="dsProjectMenuList" columnid="PROGRAM_NM"/>
      <BindItem id="item5" compid="divDetail.form.edtMenuNm" propid="value" datasetid="dsProjectMenuList" columnid="MENU_NM"/>
      <BindItem id="item6" compid="divDetail.form.cboMenuMark" propid="value" datasetid="dsProjectMenuList" columnid="DISPLAY_YN"/>
      <BindItem id="item7" compid="divDetail.form.txtDesc" propid="value" datasetid="dsProjectMenuList" columnid="DESC_TXT"/>
      <BindItem id="item8" compid="divDetail.form.staRegNm" propid="text" datasetid="dsProjectMenuList" columnid="REG_NM"/>
      <BindItem id="item9" compid="divDetail.form.staRegDt" propid="text" datasetid="dsProjectMenuList" columnid="REG_DT"/>
      <BindItem id="item10" compid="divDetail.form.staModNm" propid="text" datasetid="dsProjectMenuList" columnid="MOD_NM"/>
      <BindItem id="item11" compid="divDetail.form.staModDt" propid="text" datasetid="dsProjectMenuList" columnid="MOD_DT"/>
      <BindItem id="item12" compid="divDetail.form.staMenuParam" propid="text" datasetid="dsProjectMenuList" columnid="MENU_PARAM"/>
      <BindItem id="item13" compid="divDetail.form.staScreenCd" propid="text" datasetid="dsProjectMenuList" columnid="PROGRAM_CD"/>
      <BindItem id="item14" compid="divDetail.form.staMenuOrder" propid="text" datasetid="dsProjectMenuList" columnid="MENU_ORDER"/>
    </Bind>
  </Form>
</FDL>
